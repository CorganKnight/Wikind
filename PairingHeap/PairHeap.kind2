// Pairing Heap implementation based on Okasaki's book

// From (Okasaki, 1998): "Pairing heaps are heap-ordered multiway trees"
// Each tree node contains an element and a list of heaps

// type PHeap = Empty | (Tree element [heap list])
PHeap : Type
PHeap.empty                                     : PHeap
PHeap.tree (elem: U60) (children: (List PHeap)) : PHeap

// Merge
PHeap.merge (pq1: PHeap) (pq2: PHeap) : PHeap
PHeap.merge PHeap.empty pq = pq
PHeap.merge pq PHeap.empty = pq
PHeap.merge (PHeap.tree x pqs1) (PHeap.tree y pqs2) =
  (PHeap.merge.aux (> y x) (PHeap.tree x pqs1) (PHeap.tree y pqs2))

  PHeap.merge.aux (b: U60) (pq1: PHeap) (pq2: PHeap) : PHeap
  PHeap.merge.aux #1 (PHeap.tree x pqs) pq = (PHeap.tree x (List.cons PHeap pq pqs))
  PHeap.merge.aux #0 pq (PHeap.tree y pqs) = (PHeap.tree y (List.cons PHeap pq pqs))

// Singleton heap
PHeap.singleton (n: U60) : PHeap
PHeap.singleton n = (PHeap.tree n (List.nil PHeap))

// Insert
PHeap.insert (n: U60) (pq: PHeap) : PHeap
PHeap.insert n pq = (PHeap.merge (PHeap.singleton n) pq)

// Helper function for deleteMin. It merges children heaps in pairs from left to right,
// then merges the resulting heaps from right to left.
PHeap.mergePairs (xs: (List PHeap)) : PHeap
PHeap.mergePairs (List.nil  PHeap                           ) = PHeap.empty
PHeap.mergePairs (List.cons PHeap h  (List.nil  PHeap      )) = h
PHeap.mergePairs (List.cons PHeap h1 (List.cons PHeap h2 hs)) =
  (PHeap.merge (PHeap.merge h1 h2) (PHeap.mergePairs hs))

// Delete minimum element
PHeap.deleteMin (pq: PHeap) : PHeap
PHeap.deleteMin  PHeap.empty      =  PHeap.empty
PHeap.deleteMin (PHeap.tree x hs) = (PHeap.mergePairs hs)

// Find minimum element
PHeap.findMin (pq: PHeap) : (Maybe U60)
PHeap.findMin  PHeap.empty      = (Maybe.none U60)
PHeap.findMin (PHeap.tree x hs) = (Maybe.some U60 x)

// Constructs a pairing heap from a list
PHeap.fromList (xs: (List U60)) : PHeap
PHeap.fromList (List.nil  U60     ) =  PHeap.empty
PHeap.fromList (List.cons U60 x xs) = (PHeap.insert x (PHeap.fromList xs))

Main : _
Main = (
    let heap1 = (PHeap.fromList (List.cons U60 #1 (List.cons U60 #2 (List.cons U60 #3 (List.nil U60)))))
    let heap2 = (PHeap.fromList (List.cons U60 #6 (List.cons U60 #5 (List.cons U60 #4 (List.nil U60)))))
    let heap3 = (PHeap.merge heap1 heap2)

    heap3
    // (PHeap.findMin heap3)
    // (PHeap.deleteMin heap3)
)