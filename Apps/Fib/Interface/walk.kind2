Apps.Fib.Interface.walk (command: String) (ori: Apps.Fib.Pos) : Apps.Fib.Pos
Apps.Fib.Interface.walk command ori = 
  // Verifies the character and returns a Delta
  let aux   = (x: Char) => Apps.Fib.Interface.walk_aux x
  // Adds both of the first elemnt of both pairs, same to the second
  let f     = (x: (Pair U120 U120)) => (y: (Pair U120 U120)) => Apps.Fib.Interface.add_coords x y

  let x = Apps.Fib.Pos.get_x ori
  let y     = Apps.Fib.Pos.get_y ori
  let p_ori = (Pair.new x y)

  // Creates the delta
  let pair = String.foldl p_ori (x => (f (aux x))) command

  let x    = Pair.fst pair
  let y    = Pair.snd pair

  Apps.Fib.Pos.new x y


Apps.Fib.Interface.walk_aux (command: Char) : Pair U120 U120
// Up
Apps.Fib.Interface.walk_aux 'w' = Pair.new U120.0 (U120.sub U120.0 U120.1)
Apps.Fib.Interface.walk_aux 'W' = Pair.new U120.0 (U120.sub U120.0 U120.1)

// Left
Apps.Fib.Interface.walk_aux 'a' = Pair.new (U120.sub U120.0 U120.1) U120.0
Apps.Fib.Interface.walk_aux 'A' = Pair.new (U120.sub U120.0 U120.1) U120.0

// Down
Apps.Fib.Interface.walk_aux 's' = Pair.new U120.0 U120.1
Apps.Fib.Interface.walk_aux 'S' = Pair.new U120.0 U120.1

// Right
Apps.Fib.Interface.walk_aux 'd' = Pair.new U120.1 U120.0
Apps.Fib.Interface.walk_aux 'D' = Pair.new U120.1 U120.0

// Anything_else
Apps.Fib.Interface.walk_aux command = Pair.new U120.0 U120.0


// w  - UP    - (+0 -1)
// ww - UP UP - (+0 -2)
// wa - UP LF - (-1 +1)
// ws - UP DN - (+0 +0)
// wd - UP RG - (+1 -1)

// a  - LF    - (-1 +0)
// aa - LF LF - (-2 +0)
// as - LF DN - (-1 +1)
// ad - LF RG - (+0 +0)

// s  - DN    - (+0 +1)
// ss - DN DN - (+0 +2)
// sd - DN RG - (+1 +1)

// d  - RG    - (+1 +0) 
// dd - RG RG - (+2 +0)


Apps.Fib.Interface.add_coords (pair: Pair U120 U120) (delta: Pair U120 U120): Pair U120 U120 {
  let dfst = Pair.fst delta
  let pfst = Pair.fst pair
  let rfst = U120.add dfst pfst
  
  let dsnd = Pair.snd delta
  let psnd = Pair.snd pair
  let rsnd = U120.add dsnd psnd
  
  Pair.new rfst rsnd
}
