// action includes:
// - EntityID (12 bits)
// - Command (4 bits)
// - DeltaX (4 bits)
// - DeltaY (4 bits)

//Player é tudo que é 512 acima

// Command
// 0000 - Walk
// 0001 - Interact
// 0010 - 
// 0011 - 
// 0100 - 
// 0101 - 
// 0110 - 
// 0111 - 
// 1000 - 
// 1001 - 
// 1010 - Skill0
// 1011 - Skill1
// 1100 - Skill2
// 1101 - Skill3
// 1110 - Skill4
// 1111 - Skill5

// Char:
// xy: u16 - Position
// xp: u12 - Experience
// hp: u12 - Current HP
// of: u16 - Sell offer
// rt: u2  - Root counter
// sl: u2  - Silence counter
// gd: u12 - Gold, kgt amount stored in a character 
// cd: u12 - Cooldown, when is the next turn that player can move
// skills:
// - skill_0: u6
// - skill_1: u6
// - skill_2: u6
// - skill_3: u6
// - skill_4: u6
// - skill_5: u6


// Walk - 
  // Entity ID
  // Delta x
  // Delta y
  // State


Apps.Fib.State.update (action: U120) (state: Apps.Fib.State) : Apps.Fib.State
Apps.Fib.State.update action (Apps.Fib.State.new map tab) = 
  let id      = Apps.Fib.Action.get_id action
  let ent_tab = Apps.Fib.Table.got tab id
  match Pair ent_tab {
    new =>
      if (Bool.equal (U120.equal ent_tab.snd U120.0) (U120.equal (Apps.Fib.Action.get_comm action) (U120.new 0 8))) {
        Apps.Fib.State.create_unit (Apps.Fib.State.new map tab) (Apps.Fib.Action.get_data action) id
      }
      else {
        (Apps.Fib.State.new map tab)
      }
  }

Apps.Fib.State.update.command (state: Apps.Fib.State) (command: U120) (data: U120) (ent: Apps.Fib.Entity) (id: Apps.Fib.Id) : Apps.Fib.State
Apps.Fib.State.update.command state (U120.new 0 0) data ent id =  Apps.Fib.Action.walk state data ent id
Apps.Fib.State.update.command state (U120.new 0 1) data ent id =  state // interact?
Apps.Fib.State.update.command state (U120.new 0 2) data ent id = Apps.Fib.State.update.skill state (U120.new 0 0) ent data
Apps.Fib.State.update.command state (U120.new 0 3) data ent id = Apps.Fib.State.update.skill state (U120.new 0 1) ent data
Apps.Fib.State.update.command state (U120.new 0 4) data ent id = Apps.Fib.State.update.skill state (U120.new 0 2) ent data
Apps.Fib.State.update.command state (U120.new 0 5) data ent id = Apps.Fib.State.update.skill state (U120.new 0 3) ent data
Apps.Fib.State.update.command state (U120.new 0 6) data ent id = Apps.Fib.State.update.skill state (U120.new 0 4) ent data
Apps.Fib.State.update.command state (U120.new 0 7) data ent id = Apps.Fib.State.update.skill state (U120.new 0 5) ent data




Apps.Fib.State.update.skill (state: Apps.Fib.State) (skill: U120) (entity: U120) (data: U120) : Apps.Fib.State {
  let pos    = Apps.Fib.Pos.new (Apps.Fib.Player.pos.get_x entity) (Apps.Fib.Player.pos.get_y entity)
  let delta  = Apps.Fib.Pos.get_xy_delta data
  match Maybe target = (Apps.Fib.Pos.modify pos delta) {
    none => state
    some => Apps.Fib.State.apply_skill state skill entity target.value
  }
}
