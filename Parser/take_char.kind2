// Consumes and returns the head
// Fail on empty input
Parser.take_char : Parser Char {
  state =>
    match Parser.State state { new =>
      match String state.left {
        nil  =>
          let state = Parser.State.new String.nil state.back state.index
          Parser.Result.fail state ""
        cons =>
          let left   = state.left.tail
          let back   = String.cons state.left.head state.back
          let index  = (+ 1 state.index)
          let state  = Parser.State.new left back index
          let result = state.left.head
          Parser.Result.done state result
      }
    }
}