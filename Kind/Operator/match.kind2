// Automatically derived from Kind.Operator/_.type
Kind.Operator.match (x: (Kind.Operator)) -(p: (x: (Kind.Operator)) Type) (add: (p (Kind.Operator.add))) (sub: (p (Kind.Operator.sub))) (mul: (p (Kind.Operator.mul))) (div: (p (Kind.Operator.div))) (mod: (p (Kind.Operator.mod))) (and: (p (Kind.Operator.and))) (or: (p (Kind.Operator.or))) (xor: (p (Kind.Operator.xor))) (shl: (p (Kind.Operator.shl))) (shr: (p (Kind.Operator.shr))) (ltn: (p (Kind.Operator.ltn))) (lte: (p (Kind.Operator.lte))) (eql: (p (Kind.Operator.eql))) (gte: (p (Kind.Operator.gte))) (gtn: (p (Kind.Operator.gtn))) (neq: (p (Kind.Operator.neq))) : (p x)
Kind.Operator.match (Kind.Operator.add) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (add)
Kind.Operator.match (Kind.Operator.sub) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (sub)
Kind.Operator.match (Kind.Operator.mul) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (mul)
Kind.Operator.match (Kind.Operator.div) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (div)
Kind.Operator.match (Kind.Operator.mod) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (mod)
Kind.Operator.match (Kind.Operator.and) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (and)
Kind.Operator.match (Kind.Operator.or) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (or)
Kind.Operator.match (Kind.Operator.xor) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (xor)
Kind.Operator.match (Kind.Operator.shl) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (shl)
Kind.Operator.match (Kind.Operator.shr) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (shr)
Kind.Operator.match (Kind.Operator.ltn) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (ltn)
Kind.Operator.match (Kind.Operator.lte) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (lte)
Kind.Operator.match (Kind.Operator.eql) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (eql)
Kind.Operator.match (Kind.Operator.gte) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (gte)
Kind.Operator.match (Kind.Operator.gtn) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (gtn)
Kind.Operator.match (Kind.Operator.neq) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (neq)
