///The @Kind.Checker@ function is just a type synonym to
// a function that acts like the *State Monad*. It takes
// a context, de bruijin level, a right hand side flag,
// substitution, a list of equations to unify and a list
// of errors and returns if the checking process failed
// or succeeded.
Kind.Checker (a: Type) : Type
Kind.Checker a = Kind.Context -> U60 -> Bool -> Kind.Subst -> (List Kind.Equation) -> (List Kind.Error) -> Kind.Result a