// Given a Bit, applies a function to the correspodent value in the map.
Bits.Map.mut <a> 
  (bits : Bits)
  (map  : Bits.Map a)
  (init : a)
  (func : a -> a)
: Bits.Map a

// Bits.e
Bits.Map.mut a Bits.e (Bits.Map.new t) init func =
  let value = Maybe.some init
  let left  = Bits.Map.new
  let right = Bits.Map.new
  Bits.Map.tie value left right

Bits.Map.mut a Bits.e (Bits.Map.tie t (Maybe.none x) left right) init func = 
  let value = Maybe.none
  Bits.Map.tie t value left right

Bits.Map.mut a Bits.e (Bits.Map.tie t (Maybe.some x value) left right) init func =
  let value = Maybe.some (func value)
  Bits.Map.tie t value left right

// Bits.o
Bits.Map.mut a (Bits.o pred) (Bits.Map.new t) init func =
  let value = Maybe.none
  let left  = Bits.Map.mut pred (Bits.Map.new t) init func
  let right = Bits.Map.new
  Bits.Map.tie value left right  

Bits.Map.mut a (Bits.o pred) (Bits.Map.tie t value left right) init func = 
  let left = Bits.Map.mut pred left init func
  Bits.Map.tie t value left right

// Bits.i
Bits.Map.mut a (Bits.i pred) (Bits.Map.new t) init func = 
  let value = Maybe.none
  let left  = Bits.Map.mut a pred (Bits.Map.new t) init func
  let right = Bits.Map.new
  Bits.Map.tie t value left right

Bits.Map.mut a (Bits.i pred) (Bits.Map.tie t value left right) init func =
  let right = Bits.Map.mut pred right init func
  Bits.Map.tie t value left right


//Warning: This function wasnt tested, if you test it, remove this comment and
//make the necessary changes and make us a PR, thanks!
