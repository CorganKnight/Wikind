// Sets a value into a tree
PatriciaMap.set <a: Type> (tree: (PatriciaMap a)) (key: U60) (value: a)
PatriciaMap.set a PatriciaMap.empty key value =
  PatriciaMap.leaf key value

PatriciaMap.set a (PatriciaMap.leaf l_key l_value) key value =
  PatriciaMap.set.leaf (== l_key key) key l_key value l_value

  PatriciaMap.set.leaf <a: Type> (b: U60) (key: U60) (l_key: U60) (value: a) (l_value: a)
  PatriciaMap.set.leaf a 1 key l_key value l_value =
    PatriciaMap.leaf key value
  PatriciaMap.set.leaf a 0 key l_key value l_value =
    Join key (PatriciaMap.leaf key value) l_key (PatriciaMap.leaf l_key l_value)

PatriciaMap.set a (PatriciaMap.branch p m t0 t1) key value =
  PatriciaMap.set.branch0 (MatchPrefix key p m) p m t0 t1 key value

  PatriciaMap.set.branch0 <a: Type> (b: U60) (p: U60) (m: U60) (t0: (PatriciaMap a)) (t1: (PatriciaMap a)) (key: U60) (value: a)
  PatriciaMap.set.branch0 a 0 p m t0 t1 key value =
    Join key (PatriciaMap.leaf key value) p (PatriciaMap.branch p m t0 t1)
  PatriciaMap.set.branch0 a 1 p m t0 t1 key value =
    PatriciaMap.set.branch1 (ZeroBit key m) p m t0 t1 key value

    PatriciaMap.set.branch1 <a: Type> (b: U60) (p: U60) (m: U60) (t0: (PatriciaMap a)) (t1: (PatriciaMap a)) (key: U60) (value: a)
    PatriciaMap.set.branch1 1 p m t0 t1 key value =
      PatriciaMap.branch p m (PatriciaMap.set t0 key value) t1
    PatriciaMap.set.branch1 0 p m t0 t1 key value =
      PatriciaMap.branch p m t0 (PatriciaMap.set t1 key value)

// Merges 2 trees in which prefixes does not contain each other
Join (p0: U60) (tree0: (PatriciaMap a)) (p1: U60) (tree1: (PatriciaMap a))
Join p0 t0 p1 t1 = (JoinAux0 (BranchingBit p0 p1) p0 t0 t1)
  (JoinAux0 m p0 t0 t1) = (JoinAux1 (ZeroBit m p0) m p0 t0 t1)
    (JoinAux1 1 m p0 t0 t1) = (PatriciaMap.branch (Mask p0 m) m t0 t1)
    (JoinAux1 0 m p0 t0 t1) = (PatriciaMap.branch (Mask p0 m) m t1 t0)

// Get a value from a tree
// Get - tree key
(Get PatriciaMap.empty key) = None
(Get (PatriciaMap.leaf j x) key) = (GetAux1 (== j key) x)
  (GetAux1 1 x) = (Some x)
  (GetAux1 0 x) = None
(Get (PatriciaMap.branch p m t0 t1) key) = (GetAux0 (MatchPrefix key p m) key m t0 t1)
  (GetAux0 0 k m t0 t1) = None
  (GetAux0 1 k m t0 t1) = (GetAux2 (ZeroBit k m) k t0 t1)
  (GetAux2 1 k t0 t1) = (Get t0 k)
  (GetAux2 0 k t0 t1) = (Get t1 k)

// Checks if the Bitwise And of x and y is 0
(ZeroBit x y) = (== (& x y) 0)

(MatchPrefix k p m) = (== (Mask k m) p)
(Mask k m) = (& k (- m 1))

// not used
(FBranch p m t PatriciaMap.empty) = t
(FBranch p m PatriciaMap.empty t) = t
(FBranch p m t0 t1) = (PatriciaMap.branch p m t0 t1)


// Finds the bit where p0 and p1 are different
(BranchingBit p0 p1) = (LowestBit (^ p0 p1))
(LowestBit x) = (LowestBitAux0 (% x 2) x)
  (LowestBitAux0 0 x) = (* 2 (LowestBit (/ x 2)))
  (LowestBitAux0 1 x) = 1

Main : _
Main =
  let map = (PatriciaMap.empty U60)
  let map = (PatriciaMap.set map a a)
  let map = (PatriciaMap.set map b b)
  let map = (PatriciaMap.set map c c)
  let map = (PatriciaMap.set map d d)
  let map = (PatriciaMap.set map e e)
  let map = (PatriciaMap.set map f f)
  (Get map m)
