type Monoid <t> {
  new (concat: t -> t -> t) (empty: t) (assoc: (a: t) -> (b: t) -> (c: t) -> (Equal (concat a (concat b c)) (concat (concat a b) c))) (identity_left: (a: t) -> Equal (concat empty a) a) (identity_right: (a: t) -> Equal (concat a empty) a)
}