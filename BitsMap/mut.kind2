//Given a Bit, applies a function to the correspodent value in the map.
BitsMap.mut <a> (bits: Bits) (map: (BitsMap a)) (init: a) (f: (x: a) a) : (BitsMap a)
// Bits.e
BitsMap.mut a Bits.e (BitsMap.new t) init f = 
  (BitsMap.tie t (Maybe.some init) (BitsMap.new t) (BitsMap.new t))
BitsMap.mut a Bits.e (BitsMap.tie t (Maybe.none t) lft rgt) init f = 
  (BitsMap.tie t (Maybe.none t) lft rgt)
BitsMap.mut a Bits.e (BitsMap.tie t (Maybe.some t value) lft rgt) init f = 
  (BitsMap.tie t (Maybe.some t (f value)) lft rgt)
// Bits.o
BitsMap.mut a (Bits.o pred) (BitsMap.new t) init f = 
  (BitsMap.tie t (Maybe.none t) (BitsMap.mut a pred (BitsMap.new t) init f) (BitsMap.new t))
BitsMap.mut a (Bits.o pred) (BitsMap.tie t val lft rgt) init f = 
  (BitsMap.tie t val (BitsMap.mut pred lft init f) rgt)
// Bits.i
BitsMap.mut a (Bits.i pred) (BitsMap.new t) init f = 
  (BitsMap.tie t (Maybe.none t) (BitsMap.mut a pred (BitsMap.new t) init f) (BitsMap.new t))
BitsMap.mut a (Bits.i pred) (BitsMap.tie t val lft rgt) init f = 
  (BitsMap.tie t val lft (BitsMap.mut pred rgt init f))


//Warning: This function wasnt tested, if you test it, remove this comment and
//make the necessary changes and make us a PR, thanks!
