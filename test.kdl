// Apps_Fib_test_Table #Fib_tst_tabl (state: (Apps_Fib_State)) : (Apps_Fib_Table)
fun (Fib_tst_tabl state) {
  (Fib_tst_tabl {Fib_st_new ~ tbl}) = tbl
}

// Apps_Fib_test_Map #Fib_tst_map (state: (Apps_Fib_State)) : (Apps_Fib_Map)
fun (Fib_tst_map state) {
  (Fib_tst_map {Fib_st_new map ~}) = map
}

// Apps_Fib_Pos_new #Fib_pos_new (x: (U120)) (y: (U120)) : (Apps_Fib_Pos)
fun (Fib_pos_new x y) {
  (Fib_pos_new x y) = dup _2 _3 = y; dup _0 _1 = x; let x_val = (U120_mod _0 {U120_new #0 #160}); dup _10 _11 = x_val; dup _12 _13 = _10; let y_val = (U120_mod _2 {U120_new #0 #160}); dup _6 _7 = y_val; dup _8 _9 = _6; let e0 = {U120_mod_DqH _1 {U120_new #0 #160} (Fib_pos_160n)}; dup _4 _5 = e0; let e1 = {U120_mod_DqH _3 {U120_new #0 #160} (Fib_pos_160n)}; {Sigma_new (Fib_pos_vnew _11 _7) {Pair_new (Fib_pos_vivx _12 _8 _4) (Fib_pos_vivy _13 _9 _5 e1)}}
}

// Pos_160_is_not_0 #Fib_pos_160n : (Not (Equal (U120) (U120_new 0 160) (U120_new 0 0)))
fun (Fib_pos_160n) {
  (Fib_pos_160n) = @absurd (Equal_rewAjK absurd {Unit_new})
}

// U120_new #U120_new (hi: U60) (lo: U60) : (U120)
ctr {U120_new hi lo}

// Bool_true #Bool_true : (Bool)
ctr {Bool_true}

// U120_less_than #U120_less9ki (a: (U120)) (b: (U120)) : (Bool)
fun (U120_less9ki a b) {
  (U120_less9ki {U120_new ahi alo} {U120_new bhi blo}) = dup _2 _3 = bhi; dup _0 _1 = ahi; (U60_if (== _0 _2) (U60_less_qDF alo blo) (U60_less_qDF _1 _3))
}

// U60_less_than #U60_less_qDF (a: U60) (b: U60) : (Bool)
fun (U60_less_qDF a b) {
  (U60_less_qDF a b) = (U60_to_bool (< a b))
}

// U60_to_bool #U60_to_bool (n: U60) : (Bool)
fun (U60_to_bool n) {
  (U60_to_bool #0) = {Bool_false}
  (U60_to_bool ~) = {Bool_true}
}

// Bool_false #Bool_false : (Bool)
ctr {Bool_false}

// U60_if #U60_if -(r: Type) (n: U60) (t: r) (f: r) : r
fun (U60_if n t f) {
  (U60_if #0 ~ f) = f
  (U60_if ~ t ~) = t
}

// Apps_Fib_Pos_Value_get_x #Fib_pos_v_gx (val: (U120)) : (U120)
fun (Fib_pos_v_gx val) {
  (Fib_pos_v_gx val) = (U120_bitwAwT val {U120_new #0 #255})
}

// U120_bitwise_and #U120_bitwAwT (a: (U120)) (b: (U120)) : (U120)
fun (U120_bitwAwT a b) {
  (U120_bitwAwT {U120_new ahi alo} {U120_new bhi blo}) = {U120_new (& ahi bhi) (& alo blo)}
}

// Apps_Fib_Pos_Value_get_y #Fib_pos_v_gy (val: (U120)) : (U120)
fun (Fib_pos_v_gy val) {
  (Fib_pos_v_gy val) = (U120_shifUd1 val {U120_new #0 #8})
}

// U120_shift_right #U120_shifUd1 (num: (U120)) (shf: (U120)) : (U120)
fun (U120_shifUd1 num shf) {
  (U120_shifUd1 {U120_new num_hi num_lo} {U120_new shf_hi shf_lo}) = dup _8 _9 = num_hi; dup _10 _11 = _8; dup _0 _1 = shf_lo; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; (U60_if shf_hi (U120_zero) (U60_if (<= _3 #60) let res_hi = (>> _9 _4); let res_lo = (>> num_lo _5); let over = (<< _10 (- #60 _6)); let res_lo = (+ over res_lo); {U120_new res_hi res_lo} let res_lo = (>> _11 (- _7 #60)); {U120_new #0 res_lo}))
}

// U120_zero #U120_zero : (U120)
fun (U120_zero) {
  (U120_zero) = {U120_new #0 #0}
}

// U120_mod_is_less_than #U120_mod_DqH (a: (U120)) (b: (U120)) (e: (Not (Equal (U120) b (U120_0)))) : (U120_IsLessThan (U120_mod a b) b)
ctr {U120_mod_DqH a b e}

// U120_mod #U120_mod (num: (U120)) (den: (U120)) : (U120)
fun (U120_mod num den) {
  (U120_mod num den) = (Pair_snd (U120_div_mod num den))
}

fun (U120_div_6Az x0 x1 x2) {
  (U120_div_6Az ~ #0 #0) = {Pair_new (U60_to_u120 (/ #0 #0)) (U60_to_u120 (% #0 #0))}
  (U120_div_6Az num _2 _3) = dup _0 _1 = num; (Maybe_match (U120_msb _0) {Pair_new (U120_zero) (U120_zero)} @msb_value let qr = {Pair_new (U120_zero) (U120_zero)}; let idx = (U120_inc msb_value); (U120_dm_go idx qr _1 {U120_new _2 _3}))
}

// U120_div_mod #U120_div_mod (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_div_mod num den) {
  (U120_div_mod num {U120_new _0 _1}) = (U120_div_6Az num _0 _1)
  (U120_div_mod num den) = dup _0 _1 = num; (Maybe_match (U120_msb _0) {Pair_new (U120_zero) (U120_zero)} @msb_value let qr = {Pair_new (U120_zero) (U120_zero)}; let idx = (U120_inc msb_value); (U120_dm_go idx qr _1 den))
}

fun (U120_dm_go0_ x0 x1 x2 x3 x4) {
  (U120_dm_go0_ #0 #0 qr ~ ~) = qr
  (U120_dm_go0_ _2 _3 qr num den) = dup _10 _11 = num; dup _8 _9 = _3; dup _6 _7 = _2; dup _4 _5 = qr; dup _0 _1 = den; dup _2 _3 = _0; let quo = (Pair_fst _4); dup _18 _19 = quo; let rem = (Pair_snd _5); let rem = (U120_shifIxZ rem (U120_one)); let bit = (U120_dec {U120_new _6 _8}); dup _16 _17 = bit; let rem = (U120_add rem (U120_get_bit _10 _16)); dup _12 _13 = rem; dup _14 _15 = _12; let qr = (Bool_if (U120_greaSls _13 _1) let quo = (U120_set_bit _18 _17); let rem = (U120_sub _14 _2); {Pair_new quo rem} {Pair_new _19 _15}); (U120_dm_go (U120_dec {U120_new _7 _9}) qr _11 _3)
}

// U120_div_mod_go #U120_dm_go (idx: (U120)) (qr: (Pair (U120) (U120))) (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dm_go idx qr num den) {
  (U120_dm_go {U120_new _0 _1} qr num den) = (U120_dm_go0_ _0 _1 qr num den)
  (U120_dm_go idx qr num den) = dup _6 _7 = den; dup _8 _9 = _6; dup _4 _5 = num; dup _2 _3 = qr; dup _0 _1 = idx; let quo = (Pair_fst _2); dup _16 _17 = quo; let rem = (Pair_snd _3); let rem = (U120_shifIxZ rem (U120_one)); let bit = (U120_dec _0); dup _14 _15 = bit; let rem = (U120_add rem (U120_get_bit _4 _14)); dup _10 _11 = rem; dup _12 _13 = _10; let qr = (Bool_if (U120_greaSls _11 _7) let quo = (U120_set_bit _16 _15); let rem = (U120_sub _12 _8); {Pair_new quo rem} {Pair_new _17 _13}); (U120_dm_go (U120_dec _1) qr _5 _9)
}

// U120_get_bit #U120_get_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_get_bit num bit) {
  (U120_get_bit num bit) = (U120_bitwAwT (U120_shifUd1 num bit) (U120_one))
}

// U120_one #U120_one : (U120)
fun (U120_one) {
  (U120_one) = {U120_new #0 #1}
}

// Bool_if #Bool_if -(a: Type) (b: (Bool)) (t: a) (f: a) : a
fun (Bool_if b t f) {
  (Bool_if {Bool_true} t ~) = t
  (Bool_if {Bool_false} ~ f) = f
}

// U120_shift_left #U120_shifIxZ (num: (U120)) (shf: (U120)) : (U120)
fun (U120_shifIxZ num shf) {
  (U120_shifIxZ {U120_new num_hi num_lo} {U120_new shf_hi shf_lo}) = dup _4 _5 = shf_lo; dup _6 _7 = _4; dup _8 _9 = _5; dup _10 _11 = _6; dup _0 _1 = num_lo; dup _2 _3 = _0; (U60_if shf_hi (U120_zero) (U60_if (<= _7 #60) let res_lo = (<< _1 _8); let res_hi = (<< num_hi _9); let over = (>> _2 (- #60 _10)); let res_hi = (+ res_hi over); {U120_new res_hi res_lo} let res_hi = (<< _3 (- _11 #60)); {U120_new res_hi #0}))
}

// U120_sub #U120_sub (a: (U120)) (b: (U120)) : (U120)
fun (U120_sub a b) {
  (U120_sub {U120_new a_hi a_lo} {U120_new b_hi b_lo}) = dup _0 _1 = a_lo; let c_lo = (- _0 b_lo); dup _4 _5 = c_lo; let c_hi = (- a_hi b_hi); dup _2 _3 = c_hi; let over = (U60_greatXRS _4 _1); let c_hi = (Bool_if over (- _2 #1) _3); {U120_new c_hi _5}
}

// U60_greater_than #U60_greatXRS (a: U60) (b: U60) : (Bool)
fun (U60_greatXRS a b) {
  (U60_greatXRS a b) = (U60_to_bool (> a b))
}

// Maybe_match #Maybe_match -(t: Type) (x: (Maybe t)) -(p: (x: (Maybe t)) Type) (none: (p (Maybe_none t))) (some: (value: t) (p (Maybe_some t value))) : (p x)
fun (Maybe_match x none some) {
  (Maybe_match {Maybe_none} none ~) = none
  (Maybe_match {Maybe_some value_} ~ some) = (some value_)
}

// Maybe_none #Maybe_none -(t: Type) : (Maybe t)
ctr {Maybe_none}

// Maybe_some #Maybe_some -(t: Type) (value: t) : (Maybe t)
ctr {Maybe_some value}

// Pair_new #Pair_new -(a: Type) -(b: Type) (fst: a) (snd: b) : (Pair a b)
ctr {Pair_new fst snd}

// U120_inc #U120_inc (n: (U120)) : (U120)
fun (U120_inc n) {
  (U120_inc {U120_new hi lo}) = dup _0 _1 = hi; let new_lo = (+ #1 lo); dup _2 _3 = new_lo; let new_hi = (U60_if _2 _0 (+ #1 _1)); {U120_new new_hi _3}
}

// U120_set_bit #U120_set_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_set_bit num bit) {
  (U120_set_bit num bit) = let bit = (U120_shifIxZ {U120_new #0 #1} bit); (U120_bitwZaf num bit)
}

// U120_bitwise_or #U120_bitwZaf (a: (U120)) (b: (U120)) : (U120)
fun (U120_bitwZaf a b) {
  (U120_bitwZaf {U120_new ahi alo} {U120_new bhi blo}) = {U120_new (| ahi bhi) (| alo blo)}
}

fun (U120_msb0_ x0 x1) {
  (U120_msb0_ #0 lo) = (Maybe_map @n (U60_to_u120 n) (U60_msb lo))
  (U120_msb0_ hi ~) = (Maybe_map @n (U60_to_u120 (+ #60 n)) (U60_msb hi))
}

// U120_msb #U120_msb (n: (U120)) : (Maybe (U120))
fun (U120_msb n) {
  (U120_msb {U120_new _0 lo}) = (U120_msb0_ _0 lo)
}

// Maybe_map #Maybe_map -(a: Type) -(b: Type) (f: (_: a) b) (m: (Maybe a)) : (Maybe b)
fun (Maybe_map f m) {
  (Maybe_map ~ {Maybe_none}) = {Maybe_none}
  (Maybe_map f {Maybe_some v}) = {Maybe_some (f v)}
}

// U60_to_u120 #U60_to_u120 (num: U60) : (U120)
fun (U60_to_u120 num) {
  (U60_to_u120 num) = {U120_new #0 num}
}

// U60_msb #U60_msb (n: U60) : (Maybe U60)
fun (U60_msb n) {
  (U60_msb #0) = {Maybe_none}
  (U60_msb n) = {Maybe_some (- (U60_msb_go n) #1)}
}

// U60_msb_go #U60_msb_go (n: U60) : U60
fun (U60_msb_go n) {
  (U60_msb_go #0) = #0
  (U60_msb_go n) = (+ #1 (U60_msb_go (>> n #1)))
}

// U120_greater_equal #U120_greaSls (a: (U120)) (b: (U120)) : (Bool)
fun (U120_greaSls a b) {
  (U120_greaSls {U120_new ahi alo} {U120_new bhi blo}) = dup _2 _3 = bhi; dup _0 _1 = ahi; (U60_if (== _0 _2) (U60_greatvs1 alo blo) (U60_greatvs1 _1 _3))
}

// U60_greater_equal #U60_greatvs1 (a: U60) (b: U60) : (Bool)
fun (U60_greatvs1 a b) {
  (U60_greatvs1 a b) = (U60_to_bool (>= a b))
}

// U120_add #U120_add (a: (U120)) (b: (U120)) : (U120)
fun (U120_add a b) {
  (U120_add {U120_new a_hi a_lo} {U120_new b_hi b_lo}) = dup _2 _3 = a_lo; dup _0 _1 = b_lo; let c_lo = (+ _2 _0); dup _6 _7 = c_lo; dup _8 _9 = _6; let c_hi = (+ a_hi b_hi); dup _4 _5 = c_hi; let over = (Bool_or (U60_less_qDF _7 _3) (U60_less_qDF _8 _1)); let c_hi = (Bool_if over (+ _4 #1) _5); {U120_new c_hi _9}
}

// Bool_or #Bool_or (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_or a b) {
  (Bool_or {Bool_true} ~) = {Bool_true}
  (Bool_or {Bool_false} b) = b
}

// Pair_snd #Pair_snd -(a: Type) -(b: Type) (pair: (Pair a b)) : b
fun (Pair_snd pair) {
  (Pair_snd {Pair_new ~ snd}) = snd
}

// U120_dec #U120_dec (num: (U120)) : (U120)
fun (U120_dec num) {
  (U120_dec num) = (U120_sub num (U120_one))
}

// Pair_fst #Pair_fst -(a: Type) -(b: Type) (pair: (Pair a b)) : a
fun (Pair_fst pair) {
  (Pair_fst {Pair_new fst ~}) = fst
}

// U120_0 #U120_0 : (U120)
fun (U120_0) {
  (U120_0) = {U120_new #0 #0}
}

// U120_equal #U120_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_equal a b) {
  (U120_equal {U120_new ahi alo} {U120_new bhi blo}) = (U60_to_bool (& (== ahi bhi) (== alo blo)))
}

// Equal_rewrite #Equal_rewAjK -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) -(p: (_: t) Type) (x: (p a)) : (p b)
fun (Equal_rewAjK e x) {
  (Equal_rewAjK {Equal_refl} x) = x
}

// Equal_refl #Equal_refl -(t: Type) -(a: t) : (Equal t a a)
ctr {Equal_refl}

// Apps_Fib_Pos_Value_IsValid_x #Fib_pos_vivx (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120_less_than x (U120_new 0 160)) (Bool_true))) : (Equal (Bool) (U120_less_than (U120_bitwise_and (U120_bitwise_or (U120_shift_left y (U120_new 0 8)) x) (U120_new 0 255)) (U120_new 0 160)) (Bool_true))
fun (Fib_pos_vivx x y e0) {
  (Fib_pos_vivx x y e0) = dup _8 _9 = y; dup _0 _1 = x; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; let e1 = {U120_and_TXD (U120_shifIxZ _8 {U120_new #0 #8}) _3 {U120_new #0 #255}}; let e2 = {U120_sl_mz _9 {U120_new #0 #8}}; let e1_1 = (Equal_rewAjK e2 e1); let e3 = {U120_or_z_Ff (U120_bitwAwT _4 {U120_new #0 #255})}; let e1_2 = (Equal_rewAjK e3 e1_1); let e4 = {U120_and_Vb8 _5 {U120_new #0 #255}}; let e5 = {U120_ile_clt (U120_bitwAwT _6 {U120_new #0 #255}) _7 {U120_new #0 #160} e4 e0}; let e5_1 = (Equal_rewAjK (Equal_mirror e1_2) e5); e5_1
}

// U120_or_zero_left #U120_or_z_Ff (a: (U120)) : (Equal (U120) (U120_bitwise_or (U120_0) a) a)
ctr {U120_or_z_Ff a}

// U120_IsLessEqual_chain_less_than #U120_ile_clt (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120_IsLessEqual a b)) (e1: (U120_IsLessThan b c)) : (U120_IsLessThan a c)
ctr {U120_ile_clt a b c e0 e1}

// U120_less_equal #U120_lessFoK (a: (U120)) (b: (U120)) : (Bool)
fun (U120_lessFoK a b) {
  (U120_lessFoK {U120_new ahi alo} {U120_new bhi blo}) = dup _2 _3 = bhi; dup _0 _1 = ahi; (U60_if (== _0 _2) (U60_less_S85 alo blo) (U60_less_S85 _1 _3))
}

// U60_less_equal #U60_less_S85 (a: U60) (b: U60) : (Bool)
fun (U60_less_S85 a b) {
  (U60_less_S85 a b) = (U60_to_bool (<= a b))
}

// U120_and_pass_or #U120_and_TXD (a: (U120)) (b: (U120)) (c: (U120)) : let x = (U120_bitwise_and (U120_bitwise_or a b) c); let y = (U120_bitwise_or (U120_bitwise_and a c) (U120_bitwise_and b c)); (Equal (U120) x y)
ctr {U120_and_TXD a b c}

// U120_shift_left_mask_zero #U120_sl_mz (a: (U120)) (s: (U120)) : let a = (U120_bitwise_and (U120_shift_left a s) (U120_sub (U120_shift_left (U120_1) s) (U120_1))); let b = (U120_0); (Equal (U120) a b)
ctr {U120_sl_mz a s}

// U120_1 #U120_1 : (U120)
fun (U120_1) {
  (U120_1) = {U120_new #0 #1}
}

// U120_and_less_equal_a #U120_and_Vb8 (a: (U120)) (b: (U120)) : (U120_IsLessEqual (U120_bitwise_and a b) a)
ctr {U120_and_Vb8 a b}

// Equal_mirror #Equal_mirror -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) : (Equal t b a)
fun (Equal_mirror e) {
  (Equal_mirror {Equal_refl}) = {Equal_refl}
}

// Apps_Fib_Pos_Value_IsValid_y #Fib_pos_vivy (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120_less_than x (U120_new 0 160)) (Bool_true))) (e1: (Equal (Bool) (U120_less_than y (U120_new 0 160)) (Bool_true))) : (Equal (Bool) (U120_less_than (U120_shift_right (U120_bitwise_or (U120_shift_left y (U120_new 0 8)) x) (U120_new 0 8)) (U120_new 0 160)) (Bool_true))
fun (Fib_pos_vivy x y e0 e1) {
  (Fib_pos_vivy x y e0 e1) = dup _4 _5 = y; dup _6 _7 = _4; dup _8 _9 = _5; dup _10 _11 = _6; dup _0 _1 = x; dup _2 _3 = _0; let e2 = {U120_ilt_clt _1 {U120_new #0 #160} {U120_new #0 #256} e0 {Equal_refl}}; let e3 = {U120_sr_zlel _2 {U120_new #0 #8} e2}; let e4 = {U120_sr_psor (U120_shifIxZ _7 {U120_new #0 #8}) _3 {U120_new #0 #8}}; let e4_1 = (Equal_rewAjK e3 e4); let e5 = {U120_or_zxxr (U120_shifUd1 (U120_shifIxZ _8 {U120_new #0 #8}) {U120_new #0 #8})}; let e4_2 = (Equal_rewAjK e5 e4_1); let e6 = {U120_sr_slle _9 {U120_new #0 #8}}; let e7 = {U120_ile_clt (U120_shifUd1 (U120_shifIxZ _10 {U120_new #0 #8}) {U120_new #0 #8}) _11 {U120_new #0 #160} e6 e1}; let e7_1 = (Equal_rewAjK (Equal_mirror e4_2) e7); e7_1
}

// U120_shift_right_pass_or #U120_sr_psor (a: (U120)) (b: (U120)) (c: (U120)) : let x = (U120_shift_right (U120_bitwise_or a b) c); let y = (U120_bitwise_or (U120_shift_right a c) (U120_shift_right b c)); (Equal (U120) x y)
ctr {U120_sr_psor a b c}

// U120_IsLessThan_chain_less_than #U120_ilt_clt (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120_IsLessThan a b)) (e1: (U120_IsLessThan b c)) : (U120_IsLessThan a c)
ctr {U120_ilt_clt a b c e0 e1}

// U120_shift_right_shl_less_equal #U120_sr_slle (a: (U120)) (b: (U120)) : (Equal (Bool) (U120_less_equal (U120_shift_right (U120_shift_left a b) b) a) (Bool_true))
ctr {U120_sr_slle a b}

// U120_shift_right_zero_if_less_equal_length #U120_sr_zlel (a: (U120)) (b: (U120)) (e0: (Equal (Bool) (U120_less_than a (U120_shift_left (U120_1) b)) (Bool_true))) : (Equal (U120) (U120_shift_right a b) (U120_0))
ctr {U120_sr_zlel a b e0}

// U120_or_zero_right #U120_or_zxxr (a: (U120)) : (Equal (U120) (U120_bitwise_or a (U120_0)) a)
ctr {U120_or_zxxr a}

// Unit_new #Unit_new : (Unit)
ctr {Unit_new}

// Sigma_new #Sigma_new -(a: Type) -(b: (_: a) Type) (fst: a) (snd: (b fst)) : (Sigma a b)
ctr {Sigma_new fst snd}

// Apps_Fib_Pos_Value_new #Fib_pos_vnew (x: (U120)) (y: (U120)) : _
fun (Fib_pos_vnew x y) {
  (Fib_pos_vnew x y) = (U120_bitwZaf (U120_shifIxZ y {U120_new #0 #8}) x)
}

// Apps_Fib_State_update #Fib_st_upd (state: (Apps_Fib_State)) (action: (U120)) : (Apps_Fib_State)
fun (Fib_st_upd state action) {
  (Fib_st_upd {Fib_st_new map tab} action) = dup _6 _7 = tab; dup _8 _9 = _6; dup _4 _5 = map; dup _0 _1 = action; dup _2 _3 = _0; let data = (Fib_ac_gdata _1); dup _18 _19 = data; let comm = (Fib_ac_gcomm _2); dup _16 _17 = comm; let id = (Fib_ac_gid _3); dup _12 _13 = id; dup _14 _15 = _12; let ent_tab = (Fib_tbl_got _7 _13); (Pair_match ent_tab @~ @ent_tab_snd let ent = ent_tab_snd; dup _10 _11 = ent; (Bool_if (Bool_and (U120_equal _10 (U120_0)) (U120_equal _16 {U120_new #0 #8})) (Fib_st_crtu {Fib_st_new _4 _8} _18 _14) (Fib_st_updcm {Fib_st_new _5 _9} _17 _19 _15 _11)))
}

fun (Fib_st_upu70 x0 x1 x2 x3 x4 x5) {
  (Fib_st_upu70 state #0 #0 data id ent) = (Fib_ac_walk state data ent id)
  (Fib_st_upu70 state #0 #1 ~ ~ ~) = state
  (Fib_st_upu70 state #0 #2 data ~ ent) = (Fib_st_updsk state {U120_new #0 #0} data ent)
  (Fib_st_upu70 state #0 #3 data ~ ent) = (Fib_st_updsk state {U120_new #0 #1} data ent)
  (Fib_st_upu70 state #0 #4 data ~ ent) = (Fib_st_updsk state {U120_new #0 #2} data ent)
  (Fib_st_upu70 state #0 #5 data ~ ent) = (Fib_st_updsk state {U120_new #0 #3} data ent)
  (Fib_st_upu70 state #0 #6 data ~ ent) = (Fib_st_updsk state {U120_new #0 #4} data ent)
  (Fib_st_upu70 state #0 #7 data ~ ent) = (Fib_st_updsk state {U120_new #0 #5} data ent)
}

// Apps_Fib_State_update_command #Fib_st_updcm (state: (Apps_Fib_State)) (command: (U120)) (data: (U120)) (id: (Apps_Fib_Id)) (ent: (Apps_Fib_Entity)) : (Apps_Fib_State)
fun (Fib_st_updcm state command data id ent) {
  (Fib_st_updcm state {U120_new _0 _1} data id ent) = (Fib_st_upu70 state _0 _1 data id ent)
}

// Apps_Fib_State_update_skill #Fib_st_updsk (state: (Apps_Fib_State)) (skill_id: (U120)) (data: (U120)) (entity: (Apps_Fib_Entity)) : (Apps_Fib_State)
fun (Fib_st_updsk state skill_id data entity) {
  (Fib_st_updsk state skill_id data entity) = dup _6 _7 = state; dup _0 _1 = entity; dup _2 _3 = _0; dup _4 _5 = _1; let skill = (Fib_plr_sk_g _2 skill_id); let pos = (Fib_pos_new (Fib_plr_p_gx _3) (Fib_plr_p_gy _4)); let delta = (Fib_pos_g_xy data); (Maybe_match (Fib_pos_mod pos delta) _6 @target_value (Fib_st_appsk _7 skill _5 target_value))
}

// Apps_Fib_State_new #Fib_st_new (map: (Apps_Fib_Map)) (tab: (Apps_Fib_Table)) : (Apps_Fib_State)
ctr {Fib_st_new map tab}

// Apps_Fib_Map_Bases #Fib_map_base : (List (Data_BaseTree_Base))
fun (Fib_map_base) {
  (Fib_map_base) = {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base5} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}
}

// List_cons #List_cons -(t: Type) (head: t) (tail: (List t)) : (List t)
ctr {List_cons head tail}

// Data_BaseTree_Base_5 #Bt_base5 : (Data_BaseTree_Base)
ctr {Bt_base5}

// Data_BaseTree_Base_2 #Bt_base2 : (Data_BaseTree_Base)
ctr {Bt_base2}

// List_nil #List_nil -(t: Type) : (List t)
ctr {List_nil}

// Apps_Fib_Table_Bases #Fib_tbl_bses : (List (Data_BaseTree_Base))
fun (Fib_tbl_bses) {
  (Fib_tbl_bses) = {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}}}
}

// Apps_Fib_Player_pos_get_x #Fib_plr_p_gx (player: (Apps_Fib_Player)) : (U120)
fun (Fib_plr_p_gx player) {
  (Fib_plr_p_gx player) = (Fib_g_u120 player {U120_new #0 #0} {U120_new #0 #8})
}

// Apps_Fib_get_in_u120 #Fib_g_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) : (U120)
fun (Fib_g_u120 chunk pos size) {
  (Fib_g_u120 chunk pos size) = let mask = (U120_sub (U120_shifIxZ (U120_1) size) (U120_1)); let num = (U120_bitwAwT (U120_shifUd1 chunk pos) mask); num
}

// Bool_and #Bool_and (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_and a b) {
  (Bool_and {Bool_true} b) = b
  (Bool_and {Bool_false} ~) = {Bool_false}
}

// Apps_Fib_Player_skills_get #Fib_plr_sk_g (player: (Apps_Fib_Player)) (skill_id: (U120)) : (U120)
fun (Fib_plr_sk_g player skill_id) {
  (Fib_plr_sk_g player skill_id) = (Fib_g_u120 player (U120_add {U120_new #0 #84} (U120_mul skill_id {U120_new #0 #6})) {U120_new #0 #6})
}

// U120_mul #U120_mul (a: (U120)) (b: (U120)) : (U120)
fun (U120_mul a b) {
  (U120_mul {U120_new ahi alo} {U120_new bhi blo}) = dup _2 _3 = alo; dup _0 _1 = blo; let mul0 = (U60_mul_cXgV _2 _0); dup _4 _5 = mul0; let mul1 = (U60_mul_cXgV _3 bhi); let mul2 = (U60_mul_cXgV ahi _1); let res_lo = (U120_low _4); let res_hi = (+ (U120_high _5) (+ (U120_low mul1) (U120_low mul2))); {U120_new res_hi res_lo}
}

// U120_low #U120_low (n: (U120)) : U60
fun (U120_low n) {
  (U120_low {U120_new ~ lo}) = lo
}

// U60_mul_carrying #U60_mul_cXgV (a: U60) (b: U60) : (U120)
fun (U60_mul_cXgV a b) {
  (U60_mul_cXgV a b) = dup _2 _3 = a; dup _0 _1 = b; let alo = (>> (<< _2 #30) #30); dup _18 _19 = alo; let ahi = (>> _3 #30); dup _16 _17 = ahi; let blo = (>> (<< _0 #30) #30); dup _14 _15 = blo; let bhi = (>> _1 #30); dup _12 _13 = bhi; let mul0 = (* _18 _14); let mul1 = (* _19 _12); dup _10 _11 = mul1; let mul2 = (* _16 _15); dup _8 _9 = mul2; let mul3 = (* _17 _13); let mul1_lo = (<< _10 #30); let mul2_lo = (<< _8 #30); let add_lo1 = (U60_add_oI2a mul0 mul1_lo); dup _6 _7 = add_lo1; let add_lo2 = (U60_add_oI2a (Pair_snd _6) mul2_lo); dup _4 _5 = add_lo2; let car_lo1 = (Bool_to_u60 (Pair_fst _7)); let car_lo2 = (Bool_to_u60 (Pair_fst _4)); let carry = (+ car_lo1 car_lo2); let c_lo = (Pair_snd _5); let mul1_hi = (>> _11 #30); let mul2_hi = (>> _9 #30); let c_hi = (+ mul1_hi (+ mul2_hi (+ mul3 carry))); {U120_new c_hi c_lo}
}

// U60_add_overflowing #U60_add_oI2a (a: U60) (b: U60) : (Pair (Bool) U60)
fun (U60_add_oI2a a b) {
  (U60_add_oI2a a b) = dup _0 _1 = a; let res = (+ _0 b); dup _2 _3 = res; let ovr = (U60_less_qDF _2 _1); {Pair_new ovr _3}
}

// Bool_to_u60 #Bool_to_u60 (b: (Bool)) : U60
fun (Bool_to_u60 b) {
  (Bool_to_u60 {Bool_false}) = #0
  (Bool_to_u60 {Bool_true}) = #1
}

// U120_high #U120_high (n: (U120)) : U60
fun (U120_high n) {
  (U120_high {U120_new hi ~}) = hi
}

// Apps_Fib_Pos_modify #Fib_pos_mod (pos: (Apps_Fib_Pos)) (delta: (Pair (U120) (U120))) : (Maybe (Apps_Fib_Pos))
fun (Fib_pos_mod pos delta) {
  (Fib_pos_mod pos delta) = let list = (Fib_pos_rnge pos {List_cons delta {List_nil}}); (List_match list {Maybe_none} @list_head @~ {Maybe_some list_head})
}

// List_match #List_match -(t: Type) (x: (List t)) -(p: (x: (List t)) Type) (nil: (p (List_nil t))) (cons: (head: t) (tail: (List t)) (p (List_cons t head tail))) : (p x)
fun (List_match x nil cons) {
  (List_match {List_nil} nil ~) = nil
  (List_match {List_cons head_ tail_} ~ cons) = ((cons head_) tail_)
}

// Apps_Fib_Pos_range #Fib_pos_rnge (center: (Apps_Fib_Pos)) (deltas: (List (Pair (U120) (U120)))) : (List (Apps_Fib_Pos))
fun (Fib_pos_rnge center deltas) {
  (Fib_pos_rnge ~ {List_nil}) = {List_nil}
  (Fib_pos_rnge center {List_cons head tail}) = dup _0 _1 = center; dup _2 _3 = _0; (Pair_match head @head_fst @head_snd let validate = @val (U120_less9ki val {U120_new #0 #160}); dup _10 _11 = validate; let x = (U120_add (Fib_pos_g_x _1) head_fst); dup _8 _9 = x; let y = (U120_add (Fib_pos_g_y _2) head_snd); dup _6 _7 = y; let is_valid = (Bool_and (_10 _8) (_11 _6)); let go = (Fib_pos_rnge _3 tail); dup _4 _5 = go; (Bool_match is_valid {List_cons (Fib_pos_new _9 _7) _4} _5))
}

// Apps_Fib_Pos_get_y #Fib_pos_g_y (pos: (Apps_Fib_Pos)) : (U120)
fun (Fib_pos_g_y pos) {
  (Fib_pos_g_y pos) = (U120_shifUd1 (Sigma_fst pos) {U120_new #0 #8})
}

// Sigma_fst #Sigma_fst -(a: Type) -(b: (_: a) Type) (s: (Sigma a b)) : a
fun (Sigma_fst s) {
  (Sigma_fst {Sigma_new x ~}) = x
}

// Bool_match #Bool_match (x: (Bool)) -(p: (x: (Bool)) Type) (true: (p (Bool_true))) (false: (p (Bool_false))) : (p x)
fun (Bool_match x true false) {
  (Bool_match {Bool_true} true ~) = true
  (Bool_match {Bool_false} ~ false) = false
}

// Pair_match #Pair_match -(a: Type) -(b: Type) (x: (Pair a b)) -(p: (x: (Pair a b)) Type) (new: (fst: a) (snd: b) (p (Pair_new a b fst snd))) : (p x)
fun (Pair_match x new) {
  (Pair_match {Pair_new fst_ snd_} new) = ((new fst_) snd_)
}

// Apps_Fib_Pos_get_x #Fib_pos_g_x (pos: (Apps_Fib_Pos)) : (U120)
fun (Fib_pos_g_x pos) {
  (Fib_pos_g_x pos) = (U120_bitwAwT (Sigma_fst pos) {U120_new #0 #255})
}

// Apps_Fib_Table_got #Fib_tbl_got (map: (Apps_Fib_Table)) (id: (Apps_Fib_Id)) : (Pair (Apps_Fib_Table) (Apps_Fib_Entity))
fun (Fib_tbl_got map id) {
  (Fib_tbl_got map id) = (Bt_got (Fib_tbl_bses) (Fib_tbl_fid id) map)
}

// Apps_Fib_Table_Key_from_id #Fib_tbl_fid (id: (U120)) : (Apps_Fib_Table_Key)
fun (Fib_tbl_fid id) {
  (Fib_tbl_fid id) = (Fib_tbl_fid0 (Fib_tbl_bses) id)
}

fun (Fib_tbl_fndW x0 x1 x2) {
  (Fib_tbl_fndW {Bt_base2} t id) = dup _0 _1 = id; (Fib_tbl_fid1 t (U120_div _0 {U120_new #0 #2}) (U120_mod _1 {U120_new #0 #2}))
}

// Apps_Fib_Table_Key_from_id_aux0 #Fib_tbl_fid0 (bases: (List (Data_BaseTree_Base))) (id: (U120)) : (Data_BaseTree_Key bases)
fun (Fib_tbl_fid0 bases id) {
  (Fib_tbl_fid0 {List_nil} ~) = {Unit_new}
  (Fib_tbl_fid0 {List_cons _0 t} id) = (Fib_tbl_fndW _0 t id)
}

fun (Fib_tbl_fIKg x0 x1 x2 x3) {
  (Fib_tbl_fIKg bases id #0 #0) = {Bt_base_b0 (Fib_tbl_fid0 bases id)}
  (Fib_tbl_fIKg bases id #0 #1) = {Bt_base_b1 (Fib_tbl_fid0 bases id)}
}

// Apps_Fib_Table_Key_from_id_aux1 #Fib_tbl_fid1 (bases: (List (Data_BaseTree_Base))) (id: (U120)) (b: (U120)) : (Data_BaseTree_Base_Bin (Data_BaseTree_Key bases))
fun (Fib_tbl_fid1 bases id b) {
  (Fib_tbl_fid1 bases id {U120_new _0 _1}) = (Fib_tbl_fIKg bases id _0 _1)
}

// Data_BaseTree_Base_Bin_1 #Bt_base_b1 -(r: Type) (pred: r) : (Data_BaseTree_Base_Bin r)
ctr {Bt_base_b1 pred}

// U120_div #U120_div (num: (U120)) (rem: (U120)) : (U120)
fun (U120_div num rem) {
  (U120_div num rem) = (Pair_fst (U120_div_mod num rem))
}

// Data_BaseTree_Base_Bin_0 #Bt_base_b0 -(r: Type) (pred: r) : (Data_BaseTree_Base_Bin r)
ctr {Bt_base_b0 pred}

fun (Bt_got0_ x0 x1 x2 x3 x4) {
  (Bt_got0_ {Bt_base2} bs ks b0 b1) = (Pair_match (Bt_got bs ks b0) @res_fst @res_snd {Pair_new {Bt_bin_tie res_fst b1} res_snd})
}

fun (Bt_got1_ x0 x1 x2 x3 x4) {
  (Bt_got1_ {Bt_base2} bs ks b0 b1) = (Pair_match (Bt_got bs ks b1) @res_fst @res_snd {Pair_new {Bt_bin_tie b0 res_fst} res_snd})
}

fun (Bt_got2_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got2_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b0) @res_fst @res_snd {Pair_new {Bt_qui_tie res_fst b1 b2 b3 b4} res_snd})
}

fun (Bt_got3_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got3_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b1) @res_fst @res_snd {Pair_new {Bt_qui_tie b0 res_fst b2 b3 b4} res_snd})
}

fun (Bt_got4_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got4_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b2) @res_fst @res_snd {Pair_new {Bt_qui_tie b0 b1 res_fst b3 b4} res_snd})
}

fun (Bt_got5_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got5_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b3) @res_fst @res_snd {Pair_new {Bt_qui_tie b0 b1 b2 res_fst b4} res_snd})
}

fun (Bt_got6_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got6_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b4) @res_fst @res_snd {Pair_new {Bt_qui_tie b0 b1 b2 b3 res_fst} res_snd})
}

// Data_BaseTree_got #Bt_got -(v: Type) (bases: (List (Data_BaseTree_Base))) (key: (Data_BaseTree_Key bases)) (map: (Data_BaseTree bases v)) : (Pair (Data_BaseTree bases v) v)
fun (Bt_got bases key map) {
  (Bt_got {List_nil} {Unit_new} val) = dup _0 _1 = val; {Pair_new _0 _1}
  (Bt_got {List_cons _0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1}) = (Bt_got0_ _0 bs ks b0 b1)
  (Bt_got {List_cons _0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1}) = (Bt_got1_ _0 bs ks b0 b1)
  (Bt_got {List_cons _0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got2_ _0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons _0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got3_ _0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons _0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got4_ _0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons _0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got5_ _0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons _0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got6_ _0 bs ks b0 b1 b2 b3 b4)
}

// Data_BaseTree_Bin_tie #Bt_bin_tie -(r: Type) (b0: r) (b1: r) : (Data_BaseTree_Bin r)
ctr {Bt_bin_tie b0 b1}

// Data_BaseTree_Base_Qui_3 #Bt_base_q3 -(r: Type) (pred: r) : (Data_BaseTree_Base_Qui r)
ctr {Bt_base_q3 pred}

// Data_BaseTree_Base_Qui_1 #Bt_base_q1 -(r: Type) (pred: r) : (Data_BaseTree_Base_Qui r)
ctr {Bt_base_q1 pred}

// Data_BaseTree_Base_Qui_2 #Bt_base_q2 -(r: Type) (pred: r) : (Data_BaseTree_Base_Qui r)
ctr {Bt_base_q2 pred}

// Data_BaseTree_Qui_tie #Bt_qui_tie -(r: Type) (b0: r) (b1: r) (b2: r) (b3: r) (b4: r) : (Data_BaseTree_Qui r)
ctr {Bt_qui_tie b0 b1 b2 b3 b4}

// Data_BaseTree_Base_Qui_0 #Bt_base_q0 -(r: Type) (pred: r) : (Data_BaseTree_Base_Qui r)
ctr {Bt_base_q0 pred}

// Data_BaseTree_Base_Qui_4 #Bt_base_q4 -(r: Type) (pred: r) : (Data_BaseTree_Base_Qui r)
ctr {Bt_base_q4 pred}

// Apps_Fib_Action_get_id #Fib_ac_gid (action: (U120)) : (U120)
fun (Fib_ac_gid action) {
  (Fib_ac_gid action) = (Fib_g_u120 action {U120_new #0 #0} {U120_new #0 #12})
}

// Apps_Fib_Pos_get_xy_delta #Fib_pos_g_xy (data: (U120)) : (Pair (U120) (U120))
fun (Fib_pos_g_xy data) {
  (Fib_pos_g_xy data) = dup _0 _1 = data; let dx = (U120_bitwAwT _0 {U120_new #0 #15}); let dy = (U120_shifUd1 _1 {U120_new #0 #4}); let func = @n dup _2 _3 = n; dup _4 _5 = _2; (Bool_if (U120_equal (U120_div _3 {U120_new #0 #8}) (U120_1)) (U120_sub (U120_0) (U120_mod _4 {U120_new #0 #8})) (U120_mod _5 {U120_new #0 #8})); dup _6 _7 = func; {Pair_new (_6 dx) (_7 dy)}
}

// Apps_Fib_Action_walk #Fib_ac_walk (state: (Apps_Fib_State)) (data: (U120)) (entity: (Apps_Fib_Entity)) (id: (Apps_Fib_Id)) : (Apps_Fib_State)
fun (Fib_ac_walk state data entity id) {
  (Fib_ac_walk {Fib_st_new map table} data entity ~) = dup _6 _7 = map; dup _2 _3 = data; dup _4 _5 = _2; dup _0 _1 = table; let max_move = {U120_new #0 #2}; let dx = (U120_bitwAwT _3 {U120_new #0 #15}); let dy = (U120_shifUd1 _4 {U120_new #0 #4}); let real_change = @x (U120_bitwAwT x {U120_new #0 #7}); dup _10 _11 = real_change; let gtn = (U120_greaSls max_move (U120_add (_10 dx) (_11 dy))); let delta_xy = (Fib_pos_g_xy _5); dup _8 _9 = delta_xy; let dx = (Pair_fst _8); let dy = (Pair_snd _9); (Bool_if gtn (Fib_st_move entity dx dy {Fib_st_new _6 _0}) {Fib_st_new _7 _1})
}

// Apps_Fib_State_move #Fib_st_move (entity_id: (Apps_Fib_Id)) (dx: (U120)) (dy: (U120)) (state: (Apps_Fib_State)) : (Apps_Fib_State)
fun (Fib_st_move entity_id dx dy state) {
  (Fib_st_move entity_id dx dy {Fib_st_new map table}) = dup _2 _3 = table; dup _4 _5 = _2; dup _0 _1 = map; let tab_ent = (Fib_tbl_got _3 entity_id); let player = (Pair_snd tab_ent); dup _8 _9 = player; let x = (Fib_plr_p_gx _8); let y = (Fib_plr_p_gy _9); let origin_pos = (Fib_pos_new x y); dup _6 _7 = origin_pos; let modify = (Fib_pos_mod _6 {Pair_new dx dy}); (Maybe_match modify {Fib_st_new _0 _4} @modify_value (Fib_st_pmov {Fib_st_new _1 _5} _7 modify_value))
}

// Apps_Fib_Player_pos_get_y #Fib_plr_p_gy (player: (Apps_Fib_Player)) : (U120)
fun (Fib_plr_p_gy player) {
  (Fib_plr_p_gy player) = (Fib_g_u120 player {U120_new #0 #8} {U120_new #0 #8})
}

// Apps_Fib_State_player_move #Fib_st_pmov (state: (Apps_Fib_State)) (ori: (Apps_Fib_Pos)) (des: (Apps_Fib_Pos)) : (Apps_Fib_State)
fun (Fib_st_pmov state ori des) {
  (Fib_st_pmov {Fib_st_new map table} ori des) = dup _10 _11 = table; dup _6 _7 = des; dup _8 _9 = _6; dup _4 _5 = ori; dup _0 _1 = map; dup _2 _3 = _0; let destination_map_id = (Fib_map_got _1 _7); let empty_destination = (Fib_map_tlem (Pair_snd destination_map_id)); let origin_map_id = (Fib_map_got _2 _4); dup _12 _13 = origin_map_id; dup _14 _15 = _12; dup _16 _17 = _13; let table_entity_ori = (Fib_tbl_got _10 (Pair_snd _14)); (Bool_if empty_destination let new_player = @player (Fib_plr_p_c player @~ (Sigma_fst _8)); let new_table = (Fib_tbl_mut (Pair_fst table_entity_ori) new_player (Pair_snd _15)); let new_map = (Fib_map_del (Pair_fst _16) _5); let new_map = (Fib_map_set new_map (Pair_snd _17) _9); {Fib_st_new new_map new_table} {Fib_st_new _3 _11})
}

// Apps_Fib_Table_mut #Fib_tbl_mut (table: (Apps_Fib_Table)) (func: (_: (Apps_Fib_Entity)) (Apps_Fib_Entity)) (id: (Apps_Fib_Id)) : (Apps_Fib_Table)
fun (Fib_tbl_mut table func id) {
  (Fib_tbl_mut table func id) = (Bt_mut (Fib_tbl_bses) table (Fib_tbl_fid id) func)
}

fun (Bt_mut0_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut0_ {Bt_base2} tail b0 b1 key func) = {Bt_bin_tie (Bt_mut tail b0 key func) b1}
}

fun (Bt_mut1_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut1_ {Bt_base2} tail b0 b1 key func) = {Bt_bin_tie b0 (Bt_mut tail b1 key func)}
}

fun (Bt_mut2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut2_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie (Bt_mut tail b0 key func) b1 b2 b3 b4}
}

fun (Bt_mut3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut3_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 (Bt_mut tail b1 key func) b2 b3 b4}
}

fun (Bt_mut4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut4_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 b1 (Bt_mut tail b2 key func) b3 b4}
}

fun (Bt_mut5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut5_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 b1 b2 (Bt_mut tail b3 key func) b4}
}

fun (Bt_mut6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut6_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 b1 b2 b3 (Bt_mut tail b4 key func)}
}

// Data_BaseTree_mut #Bt_mut -(val: Type) (bases: (List (Data_BaseTree_Base))) (map: (Data_BaseTree bases val)) (key: (Data_BaseTree_Key bases)) (func: (_: val) val) : (Data_BaseTree bases val)
fun (Bt_mut bases map key func) {
  (Bt_mut {List_nil} end ~ func) = (func end)
  (Bt_mut {List_cons _0 tail} {Bt_bin_tie b0 b1} {Bt_base_b0 key} func) = (Bt_mut0_ _0 tail b0 b1 key func)
  (Bt_mut {List_cons _0 tail} {Bt_bin_tie b0 b1} {Bt_base_b1 key} func) = (Bt_mut1_ _0 tail b0 b1 key func)
  (Bt_mut {List_cons _0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q0 key} func) = (Bt_mut2_ _0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons _0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q1 key} func) = (Bt_mut3_ _0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons _0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q2 key} func) = (Bt_mut4_ _0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons _0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q3 key} func) = (Bt_mut5_ _0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons _0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q4 key} func) = (Bt_mut6_ _0 tail b0 b1 b2 b3 b4 key func)
}

// Apps_Fib_Player_pos_change #Fib_plr_p_c (player: (Apps_Fib_Player)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_p_c player f) {
  (Fib_plr_p_c player f) = (Fib_m_u120 player {U120_new #0 #0} {U120_new #0 #16} f)
}

// Apps_Fib_mut_in_u120 #Fib_m_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) (f: (_: (U120)) (U120)) : (U120)
fun (Fib_m_u120 chunk pos size f) {
  (Fib_m_u120 chunk pos size f) = dup _4 _5 = chunk; dup _0 _1 = pos; dup _2 _3 = _0; let mask = (U120_sub (U120_shifIxZ (U120_1) size) (U120_1)); dup _6 _7 = mask; let num = (U120_bitwAwT (U120_shifUd1 _4 _1) _6); let num = (f num); let chunk = (U120_bitwAwT (U120_bitwAaJ (U120_shifIxZ _7 _2)) _5); let chunk = (U120_bitwZaf (U120_shifIxZ num _3) chunk); chunk
}

// U120_bitwise_complement #U120_bitwAaJ (n: (U120)) : (U120)
fun (U120_bitwAaJ n) {
  (U120_bitwAaJ {U120_new hi lo}) = {U120_new (U60_bitwi4Md hi) (U60_bitwi4Md lo)}
}

// U60_bitwise_complement #U60_bitwi4Md (n: U60) : U60
fun (U60_bitwi4Md n) {
  (U60_bitwi4Md n) = (^ n (U60_max_val))
}

// U60_max_val #U60_max_val : U60
fun (U60_max_val) {
  (U60_max_val) = #1152921504606846975
}

// Apps_Fib_Map_set #Fib_map_set (map: (Apps_Fib_Map)) (id: (Apps_Fib_Id)) (pos: (Apps_Fib_Pos)) : (Apps_Fib_Map)
fun (Fib_map_set map id pos) {
  (Fib_map_set map id pos) = let keys = (Fib_map_kfps pos); dup _0 _1 = keys; let key = (Pair_fst _0); let idx = (Pair_snd _1); let func = @chunk (Fib_s_u120 (U120_mul idx {U120_new #0 #12}) id chunk); (Bt_mut (Fib_map_base) map key func)
}

// Apps_Fib_set_in_u120 #Fib_s_u120 (x: (U120)) (id: (Apps_Fib_Id)) (chunk: (U120)) : (U120)
fun (Fib_s_u120 x id chunk) {
  (Fib_s_u120 x id chunk) = let shl = @n (U120_shifIxZ n x); dup _0 _1 = shl; let res = (U120_bitwZaf (U120_bitwAwT (U120_bitwAaJ (_0 {U120_new #0 #4095})) chunk) (_1 id)); res
}

// Apps_Fib_Map_Key_from_pos #Fib_map_kfps (pos: (Apps_Fib_Pos)) : (Pair (Apps_Fib_Map_Key) (U120))
fun (Fib_map_kfps pos) {
  (Fib_map_kfps pos) = dup _0 _1 = pos; let x = (Fib_pos_g_x _0); dup _2 _3 = x; let y = (Fib_pos_g_y _1); let key = (U120_low (U120_add (U120_div _2 {U120_new #0 #10}) (U120_mul y {U120_new #0 #16}))); {Pair_new (Bt_key_fu60 (Fib_map_base) #2560 (% key #2560)) (U120_mod _3 {U120_new #0 #10})}
}

// Data_BaseTree_Key_from_u60_base5 #Bt_key_fu605 (t: (List (Data_BaseTree_Base))) (q: U60) (m: U60) (n: U60) : (Data_BaseTree_Base_Qui (Data_BaseTree_Key t))
fun (Bt_key_fu605 t q m n) {
  (Bt_key_fu605 t #0 m n) = {Bt_base_q0 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #1 m n) = {Bt_base_q1 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #2 m n) = {Bt_base_q2 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #3 m n) = {Bt_base_q3 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #4 m n) = {Bt_base_q4 (Bt_key_fu60 t m n)}
}

// Data_BaseTree_Key_from_u60_base2 #Bt_key_fu602 (t: (List (Data_BaseTree_Base))) (q: U60) (m: U60) (n: U60) : (Data_BaseTree_Base_Bin (Data_BaseTree_Key t))
fun (Bt_key_fu602 t q m n) {
  (Bt_key_fu602 t #0 m n) = {Bt_base_b0 (Bt_key_fu60 t m n)}
  (Bt_key_fu602 t #1 m n) = {Bt_base_b1 (Bt_key_fu60 t m n)}
}

fun (Bt_key_fudtW x0 x1 x2 x3) {
  (Bt_key_fudtW {Bt_base2} t m n) = dup _0 _1 = n; let m = (/ m #2); dup _4 _5 = m; dup _6 _7 = _4; let d = (/ _0 _5); dup _2 _3 = d; let n = (- _1 (* _2 _6)); (Bt_key_fu602 t _3 _7 n)
  (Bt_key_fudtW {Bt_base5} t m n) = dup _0 _1 = n; let m = (/ m #5); dup _4 _5 = m; dup _6 _7 = _4; let d = (/ _0 _5); dup _2 _3 = d; let n = (- _1 (* _2 _6)); (Bt_key_fu605 t _3 _7 n)
}

// Data_BaseTree_Key_from_u60 #Bt_key_fu60 (bases: (List (Data_BaseTree_Base))) (m: U60) (n: U60) : (Data_BaseTree_Key bases)
fun (Bt_key_fu60 bases m n) {
  (Bt_key_fu60 {List_nil} ~ ~) = {Unit_new}
  (Bt_key_fu60 {List_cons _0 t} m n) = (Bt_key_fudtW _0 t m n)
}

// Apps_Fib_Map_tile_is_empty #Fib_map_tlem (tile: (U120)) : (Bool)
fun (Fib_map_tlem tile) {
  (Fib_map_tlem tile) = (U120_is_zero tile)
}

fun (U120_is_zFC4 x0 x1) {
  (U120_is_zFC4 #0 #0) = {Bool_true}
  (U120_is_zFC4 ~ ~) = {Bool_false}
}

// U120_is_zero #U120_is_zero (n: (U120)) : (Bool)
fun (U120_is_zero n) {
  (U120_is_zero {U120_new _0 _1}) = (U120_is_zFC4 _0 _1)
  (U120_is_zero ~) = {Bool_false}
}

// Apps_Fib_Map_del #Fib_map_del (map: (Apps_Fib_Map)) (pos: (Apps_Fib_Pos)) : (Apps_Fib_Map)
fun (Fib_map_del map pos) {
  (Fib_map_del map pos) = (Fib_map_set map (U120_0) pos)
}

// Apps_Fib_Map_got #Fib_map_got (map: (Apps_Fib_Map)) (pos: (Apps_Fib_Pos)) : (Pair (Apps_Fib_Map) (Apps_Fib_Id))
fun (Fib_map_got map pos) {
  (Fib_map_got map pos) = let keys = (Fib_map_kfps pos); (Pair_match keys @keys_fst @keys_snd let p = (Bt_got (Fib_map_base) keys_fst map); (Pair_match p @p_fst @p_snd {Pair_new p_fst (Fib_map_gtil p_snd keys_snd)}))
}

// Apps_Fib_Map_get_tile #Fib_map_gtil (chunk: (U120)) (idx: (U120)) : (Apps_Fib_Id)
fun (Fib_map_gtil chunk idx) {
  (Fib_map_gtil chunk idx) = (U120_bitwAwT (U120_shifUd1 chunk (U120_mul idx {U120_new #0 #12})) {U120_new #0 #4095})
}

// Apps_Fib_Action_get_comm #Fib_ac_gcomm (action: (U120)) : (U120)
fun (Fib_ac_gcomm action) {
  (Fib_ac_gcomm action) = (Fib_g_u120 action {U120_new #0 #12} {U120_new #0 #4})
}

// Apps_Fib_State_create_unit #Fib_st_crtu (state: (Apps_Fib_State)) (id: (Apps_Fib_Id)) (data: (U120)) : (Apps_Fib_State)
fun (Fib_st_crtu state id data) {
  (Fib_st_crtu {Fib_st_new map tab} id data) = let spawn_pos = (Fib_st_crtuc data); let new_player = (Pair_match spawn_pos @spawn_pos_fst @spawn_pos_snd (Fib_plr_dflt spawn_pos_fst spawn_pos_snd)); (Fib_st_pplc {Fib_st_new map tab} new_player id)
}

fun (Fib_st_crpkB x0 x1) {
  (Fib_st_crpkB #0 #0) = {Pair_new {U120_new #0 #12} {U120_new #0 #12}}
  (Fib_st_crpkB #0 #1) = {Pair_new {U120_new #0 #147} {U120_new #0 #12}}
  (Fib_st_crpkB #0 #2) = {Pair_new {U120_new #0 #147} {U120_new #0 #147}}
  (Fib_st_crpkB #0 #3) = {Pair_new {U120_new #0 #12} {U120_new #0 #147}}
}

// Apps_Fib_State_create_unit_city #Fib_st_crtuc (data: (U120)) : (Pair (U120) (U120))
fun (Fib_st_crtuc data) {
  (Fib_st_crtuc {U120_new _0 _1}) = (Fib_st_crpkB _0 _1)
}

// Apps_Fib_Player_default #Fib_plr_dflt (x: (U120)) (y: (U120)) : (Apps_Fib_Player)
fun (Fib_plr_dflt x y) {
  (Fib_plr_dflt x y) = let xp = (U120_0); let hp = {U120_new #0 #100}; let of = (U120_0); let gd = {U120_new #0 #50}; let cd = (U120_0); let skills = {List_nil}; (Fib_plr_new x y xp hp of gd cd skills)
}

// Apps_Fib_Player_new #Fib_plr_new (x: (U120)) (y: (U120)) (xp: (U120)) (hp: (U120)) (of: (U120)) (gd: (U120)) (cd: (U120)) (skills: (List (U120))) : (Apps_Fib_Player)
fun (Fib_plr_new x y xp hp of gd cd skills) {
  (Fib_plr_new x y xp hp of gd cd skills) = let player = {U120_new #0 #0}; let player = (Fib_plr_p_c player @~ (U120_add (U120_shifIxZ y {U120_new #0 #8}) x)); let player = (Fib_plr_xp_c player @~ xp); let player = (Fib_plr_hp_c player @~ hp); let player = (Fib_plr_of_c player @~ of); let player = (Fib_plr_gd_c player @~ gd); let player = (Fib_plr_cd_c player @~ cd); let func = @skill_id @acc dup _0 _1 = acc; dup _2 _3 = _0; {Pair_new (Fib_plr_sk_c (Pair_fst _1) (Pair_snd _2) @~ skill_id) (U120_add (Pair_snd _3) (U120_1))}; let pair = (List_foldl {Pair_new player (U120_0)} func skills); (Pair_fst pair)
}

// Apps_Fib_Player_gd_change #Fib_plr_gd_c (player: (Apps_Fib_Player)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_gd_c player f) {
  (Fib_plr_gd_c player f) = (Fib_m_u120 player {U120_new #0 #60} {U120_new #0 #12} f)
}

// Apps_Fib_Player_skills_change #Fib_plr_sk_c (player: (Apps_Fib_Player)) (skill_id: (U120)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_sk_c player skill_id f) {
  (Fib_plr_sk_c player skill_id f) = (Fib_m_u120 player (U120_add {U120_new #0 #84} (U120_mul skill_id {U120_new #0 #6})) {U120_new #0 #6} f)
}

// List_foldl #List_foldl -(a: Type) -(b: Type) (nil: b) (cons: (_: a) (_: b) b) (xs: (List a)) : b
fun (List_foldl nil cons xs) {
  (List_foldl nil ~ {List_nil}) = nil
  (List_foldl nil cons {List_cons x_h x_t}) = dup _0 _1 = cons; (List_foldl ((_0 x_h) nil) _1 x_t)
}

// Apps_Fib_Player_cd_change #Fib_plr_cd_c (player: (Apps_Fib_Player)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_cd_c player f) {
  (Fib_plr_cd_c player f) = (Fib_m_u120 player {U120_new #0 #72} {U120_new #0 #12} f)
}

// Apps_Fib_Player_hp_change #Fib_plr_hp_c (player: (Apps_Fib_Player)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_hp_c player f) {
  (Fib_plr_hp_c player f) = (Fib_m_u120 player {U120_new #0 #28} {U120_new #0 #12} f)
}

// Apps_Fib_Player_of_change #Fib_plr_of_c (player: (Apps_Fib_Player)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_of_c player f) {
  (Fib_plr_of_c player f) = (Fib_m_u120 player {U120_new #0 #40} {U120_new #0 #16} f)
}

// Apps_Fib_Player_xp_change #Fib_plr_xp_c (player: (Apps_Fib_Player)) (f: (_: (U120)) (U120)) : (Apps_Fib_Player)
fun (Fib_plr_xp_c player f) {
  (Fib_plr_xp_c player f) = (Fib_m_u120 player {U120_new #0 #16} {U120_new #0 #12} f)
}

// Apps_Fib_State_player_place #Fib_st_pplc (state: (Apps_Fib_State)) (player: (Apps_Fib_Player)) (id: (Apps_Fib_Id)) : (Apps_Fib_State)
fun (Fib_st_pplc state player id) {
  (Fib_st_pplc {Fib_st_new map tab} player id) = dup _12 _13 = id; dup _14 _15 = _12; dup _8 _9 = map; dup _10 _11 = _8; dup _4 _5 = player; dup _6 _7 = _4; dup _0 _1 = tab; dup _2 _3 = _0; let x = (Fib_plr_p_gx _5); let y = (Fib_plr_p_gy _6); let pos = (Fib_pos_new x y); dup _16 _17 = pos; let map_id = (Fib_map_got _9 _16); (Pair_match map_id @map_id_fst @map_id_snd (Bool_if (U120_equal (U120_0) map_id_snd) let tab_ent = (Fib_tbl_got _1 _13); (Pair_match tab_ent @tab_ent_fst @tab_ent_snd (Bool_if (U120_equal (U120_0) tab_ent_snd) let tab = (Fib_tbl_set tab_ent_fst _7 _14); let map = (Fib_map_set map_id_fst _15 _17); {Fib_st_new map tab} {Fib_st_new _10 _2})) {Fib_st_new _11 _3}))
}

// Apps_Fib_Table_set #Fib_tbl_set (map: (Apps_Fib_Table)) (entity: (Apps_Fib_Entity)) (id: (Apps_Fib_Id)) : (Apps_Fib_Table)
fun (Fib_tbl_set map entity id) {
  (Fib_tbl_set map entity id) = (Bt_set (Fib_tbl_bses) (Fib_tbl_fid id) map entity)
}

fun (Bt_set0_ x0 x1 x2 x3 x4 x5) {
  (Bt_set0_ {Bt_base2} bs ks b0 b1 val) = {Bt_bin_tie (Bt_set bs ks b0 val) b1}
}

fun (Bt_set1_ x0 x1 x2 x3 x4 x5) {
  (Bt_set1_ {Bt_base2} bs ks b0 b1 val) = {Bt_bin_tie b0 (Bt_set bs ks b1 val)}
}

fun (Bt_set2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set2_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie (Bt_set bs ks b0 val) b1 b2 b3 b4}
}

fun (Bt_set3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set3_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 (Bt_set bs ks b1 val) b2 b3 b4}
}

fun (Bt_set4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set4_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 b1 (Bt_set bs ks b2 val) b3 b4}
}

fun (Bt_set5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set5_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 b1 b2 (Bt_set bs ks b3 val) b4}
}

fun (Bt_set6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set6_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 b1 b2 b3 (Bt_set bs ks b4 val)}
}

// Data_BaseTree_set #Bt_set -(v: Type) (bases: (List (Data_BaseTree_Base))) (key: (Data_BaseTree_Key bases)) (map: (Data_BaseTree bases v)) (val: v) : (Data_BaseTree bases v)
fun (Bt_set bases key map val) {
  (Bt_set {List_nil} {Unit_new} ~ val) = val
  (Bt_set {List_cons _0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1} val) = (Bt_set0_ _0 bs ks b0 b1 val)
  (Bt_set {List_cons _0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1} val) = (Bt_set1_ _0 bs ks b0 b1 val)
  (Bt_set {List_cons _0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set2_ _0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons _0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set3_ _0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons _0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set4_ _0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons _0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set5_ _0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons _0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set6_ _0 bs ks b0 b1 b2 b3 b4 val)
}

fun (Fib_st_apSNk x0 x1 x2 x3 x4) {
  (Fib_st_apSNk state #0 #0 ~ ~) = state
  (Fib_st_apSNk state #0 #1 entity target) = (Fib_sk_fireb state entity target)
  (Fib_st_apSNk state #0 #2 ~ ~) = state
  (Fib_st_apSNk state #0 #3 ~ ~) = state
  (Fib_st_apSNk state #0 #4 ~ ~) = state
}

// Apps_Fib_State_apply_skill #Fib_st_appsk (state: (Apps_Fib_State)) (skill: (U120)) (entity: (U120)) (target: (Apps_Fib_Pos)) : (Apps_Fib_State)
fun (Fib_st_appsk state skill entity target) {
  (Fib_st_appsk state {U120_new _0 _1} entity target) = (Fib_st_apSNk state _0 _1 entity target)
}

// Apps_Fib_Skill_fireball #Fib_sk_fireb (state: (Apps_Fib_State)) (player: (Apps_Fib_Player)) (pos: (Apps_Fib_Pos)) : (Apps_Fib_State)
fun (Fib_sk_fireb state player pos) {
  (Fib_sk_fireb {Fib_st_new map tab} player pos) = dup _4 _5 = player; dup _0 _1 = pos; dup _2 _3 = _0; let ~ = {Pair_new (Fib_pos_g_x _1) (Fib_pos_g_y _2)}; let deltas = (Fib_pos_arn {U120_new #0 #2}); let x = (Fib_plr_p_gx _4); let y = (Fib_plr_p_gy _5); let coords = {List_cons _3 (Fib_pos_rnge (Fib_pos_new x y) deltas)}; let fold = (List_fold coords); let damage = @pos @state (Fib_st_pdmg state pos {U120_new #0 #50}); ((fold {Fib_st_new map tab}) damage)
}

fun (Fib_pos_a3IR x0 x1) {
  (Fib_pos_a3IR #0 #0) = {List_nil}
  (Fib_pos_a3IR _2 _3) = dup _6 _7 = _2; dup _8 _9 = _6; dup _10 _11 = _7; dup _0 _1 = _3; dup _2 _3 = _0; dup _4 _5 = _1; let fst = {Pair_new {U120_new _8 _2} (U120_0)}; let snd = {Pair_new (U120_sub (U120_0) {U120_new _9 _3}) (U120_0)}; {List_cons fst {List_cons snd (Fib_pos_arnv (U120_dec {U120_new _10 _4}) {U120_new _11 _5})}}
}

// Apps_Fib_Pos_around #Fib_pos_arn (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fib_pos_arn range) {
  (Fib_pos_arn {U120_new _0 _1}) = (Fib_pos_a3IR _0 _1)
  (Fib_pos_arn range) = dup _0 _1 = range; dup _2 _3 = _0; dup _4 _5 = _1; let fst = {Pair_new _2 (U120_0)}; let snd = {Pair_new (U120_sub (U120_0) _3) (U120_0)}; {List_cons fst {List_cons snd (Fib_pos_arnv (U120_dec _4) _5)}}
}

fun (Fib_pos_aqmT x0 x1 x2) {
  (Fib_pos_aqmT #0 #0 range) = dup _0 _1 = range; dup _2 _3 = _0; let fst = {Pair_new (U120_0) _1}; let snd = {Pair_new (U120_0) (U120_sub (U120_0) _2)}; {List_cons fst {List_cons snd (Fib_pos_arn (U120_dec _3))}}
  (Fib_pos_aqmT _2 _3 range) = dup _24 _25 = _3; dup _26 _27 = _24; dup _28 _29 = _25; dup _30 _31 = _26; dup _32 _33 = _27; dup _34 _35 = _28; dup _36 _37 = _29; dup _38 _39 = _30; dup _8 _9 = _2; dup _10 _11 = _8; dup _12 _13 = _9; dup _14 _15 = _10; dup _16 _17 = _11; dup _18 _19 = _12; dup _20 _21 = _13; dup _22 _23 = _14; dup _0 _1 = range; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; let fst = {Pair_new {U120_new _15 _31} (U120_sub _3 {U120_new _16 _32})}; let snd = {Pair_new {U120_new _17 _33} (U120_sub {U120_new _18 _34} _4)}; let trd = {Pair_new (U120_sub (U120_0) {U120_new _19 _35}) (U120_sub _5 {U120_new _20 _36})}; let frt = {Pair_new (U120_sub (U120_0) {U120_new _21 _37}) (U120_sub {U120_new _22 _38} _6)}; {List_cons fst {List_cons snd {List_cons trd {List_cons frt (Fib_pos_arnv (U120_dec {U120_new _23 _39}) _7)}}}}
}

// Apps_Fib_Pos_around_variations #Fib_pos_arnv (variations: (U120)) (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fib_pos_arnv variations range) {
  (Fib_pos_arnv {U120_new _0 _1} range) = (Fib_pos_aqmT _0 _1 range)
  (Fib_pos_arnv var range) = dup _8 _9 = var; dup _10 _11 = _8; dup _12 _13 = _9; dup _14 _15 = _10; dup _16 _17 = _11; dup _18 _19 = _12; dup _20 _21 = _13; dup _22 _23 = _14; dup _0 _1 = range; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; let fst = {Pair_new _15 (U120_sub _3 _16)}; let snd = {Pair_new _17 (U120_sub _18 _4)}; let trd = {Pair_new (U120_sub (U120_0) _19) (U120_sub _5 _20)}; let frt = {Pair_new (U120_sub (U120_0) _21) (U120_sub _22 _6)}; {List_cons fst {List_cons snd {List_cons trd {List_cons frt (Fib_pos_arnv (U120_dec _23) _7)}}}}
}

// List_fold #List_fold -(a: Type) -(p: Type) (xs: (List a)) : (_: p) (_: (_: a) (_: p) p) p
fun (List_fold xs) {
  (List_fold {List_nil}) = @nil @~ nil
  (List_fold {List_cons head tail}) = @nil @cons dup _0 _1 = cons; ((_0 head) (((List_fold tail) nil) _1))
}

// Apps_Fib_State_player_damage #Fib_st_pdmg (state: (Apps_Fib_State)) (pos: (Apps_Fib_Pos)) (dmg: (U120)) : (Apps_Fib_State)
fun (Fib_st_pdmg state pos dmg) {
  (Fib_st_pdmg {Fib_st_new map table} pos dmg) = dup _8 _9 = dmg; dup _6 _7 = pos; dup _2 _3 = map; dup _4 _5 = _2; dup _0 _1 = table; let map_id = (Fib_map_got _3 _6); dup _22 _23 = map_id; let id = (Pair_snd _22); dup _16 _17 = id; dup _18 _19 = _16; dup _20 _21 = _17; (Bool_if (U120_is_zero _18) {Fib_st_new _4 _0} let table_entity = (Fib_tbl_got _1 _19); dup _14 _15 = table_entity; let table = (Pair_fst _14); dup _12 _13 = table; let player = (Pair_snd _15); let player_hp = (Fib_plr_hp_g player); dup _10 _11 = player_hp; let dmg_gte = (U120_greaSls _8 _10); (Bool_if dmg_gte let new_player = @x (Fib_plr_dmg x _11); let new_table = (Fib_tbl_mut _12 new_player _20); let new_map = (Fib_map_del (Pair_fst _23) _7); {Fib_st_new new_map new_table} let new_player = @x (Fib_plr_dmg x _9); let new_table = (Fib_tbl_mut _13 new_player _21); {Fib_st_new _5 new_table}))
}

// Apps_Fib_Player_hp_get #Fib_plr_hp_g (player: (Apps_Fib_Player)) : (U120)
fun (Fib_plr_hp_g player) {
  (Fib_plr_hp_g player) = (Fib_g_u120 player {U120_new #0 #28} {U120_new #0 #12})
}

// Apps_Fib_Player_damage #Fib_plr_dmg (player: (Apps_Fib_Player)) (dmg: (U120)) : (Apps_Fib_Player)
fun (Fib_plr_dmg player dmg) {
  (Fib_plr_dmg player dmg) = (Fib_plr_hp_c player @x (U120_sub x dmg))
}

// Apps_Fib_Action_get_data #Fib_ac_gdata (action: (U120)) : (U120)
fun (Fib_ac_gdata action) {
  (Fib_ac_gdata action) = (Fib_g_u120 action {U120_new #0 #16} {U120_new #0 #8})
}

// Apps_Fib_Action_skill_code #Fib_ac_skcd (state: (Apps_Fib_State)) (skill_id: (U120)) (caster_id: (U120)) (target: (Apps_Fib_Pos)) : (U120)
fun (Fib_ac_skcd state skill_id caster_id target) {
  (Fib_ac_skcd {Fib_st_new ~ tab} skill_id caster_id target) = dup _0 _1 = caster_id; let tab_ent = (Fib_tbl_got tab _0); let player = (Pair_snd tab_ent); dup _2 _3 = player; let center = (Fib_pos_new (Fib_plr_p_gx _2) (Fib_plr_p_gy _3)); let comm = (U120_add {U120_new #0 #2} skill_id); let data = (Fib_pos_tdat center target); let action = (U120_add _1 (U120_add (U120_shifIxZ comm {U120_new #0 #12}) (U120_shifIxZ data {U120_new #0 #16}))); action
}

// Apps_Fib_Pos_to_data #Fib_pos_tdat (center: (Apps_Fib_Pos)) (target: (Apps_Fib_Pos)) : (U120)
fun (Fib_pos_tdat center target) {
  (Fib_pos_tdat center target) = dup _2 _3 = target; dup _0 _1 = center; let cx = (Fib_pos_g_x _0); let cy = (Fib_pos_g_y _1); let tx = (Fib_pos_g_x _2); let ty = (Fib_pos_g_y _3); let func = @c dup _8 _9 = c; dup _10 _11 = _8; @t dup _4 _5 = t; dup _6 _7 = _4; (Bool_if (U120_greaQBd _9 _5) (U120_bitwZaf {U120_new #0 #8} (U120_sub _10 _6)) (U120_sub _7 _11)); dup _12 _13 = func; let x = ((_12 cx) tx); let y = ((_13 cy) ty); (U120_bitwZaf x (U120_shifIxZ y {U120_new #0 #4}))
}

// U120_greater_than #U120_greaQBd (a: (U120)) (b: (U120)) : (Bool)
fun (U120_greaQBd a b) {
  (U120_greaQBd {U120_new ahi alo} {U120_new bhi blo}) = dup _2 _3 = bhi; dup _0 _1 = ahi; (U60_if (== _0 _2) (U60_greatXRS alo blo) (U60_greatXRS _1 _3))
}

// Apps_Fib_Table_show_players #Fib_tbl_spl (table: (Apps_Fib_Table)) : (String)
fun (Fib_tbl_spl table) {
  (Fib_tbl_spl table) = {String_cons #10 (String_coqti {String_cons #80 {String_cons #108 {String_cons #97 {String_cons #121 {String_cons #101 {String_cons #114 {String_cons #115 {String_cons #32 {String_cons #105 {String_cons #110 {String_cons #32 {String_cons #84 {String_cons #97 {String_cons #98 {String_cons #108 {String_cons #101 {String_cons #32 {String_cons #58 {String_cons #32 {String_nil}}}}}}}}}}}}}}}}}}}} {String_cons #10 (Fib_tbl_spl0 table {U120_new #0 #512})})}
}

fun (Fib_tbl_sh_K x0 x1 x2) {
  (Fib_tbl_sh_K ~ #0 #1024) = {String_nil}
  (Fib_tbl_sh_K table _2 _3) = dup _8 _9 = _2; dup _10 _11 = _8; dup _4 _5 = table; dup _6 _7 = _4; dup _0 _1 = _3; dup _2 _3 = _0; let tab_ent = (Fib_tbl_got _5 {U120_new _9 _1}); (Pair_match tab_ent @~ @tab_ent_snd dup _12 _13 = tab_ent_snd; (Bool_if (Bool_not (U120_is_zero _12)) (String_coqti (Fib_plr_show _13) {String_cons #10 (Fib_tbl_spl0 _6 (U120_inc {U120_new _10 _2}))}) (Fib_tbl_spl0 _7 (U120_inc {U120_new _11 _3}))))
}

// Apps_Fib_Table_show_players_aux #Fib_tbl_spl0 (table: (Apps_Fib_Table)) (id: (U120)) : (String)
fun (Fib_tbl_spl0 table id) {
  (Fib_tbl_spl0 table {U120_new _0 _1}) = (Fib_tbl_sh_K table _0 _1)
  (Fib_tbl_spl0 table id) = dup _4 _5 = id; dup _6 _7 = _4; dup _0 _1 = table; dup _2 _3 = _0; let tab_ent = (Fib_tbl_got _1 _5); (Pair_match tab_ent @~ @tab_ent_snd dup _8 _9 = tab_ent_snd; (Bool_if (Bool_not (U120_is_zero _8)) (String_coqti (Fib_plr_show _9) {String_cons #10 (Fib_tbl_spl0 _2 (U120_inc _6))}) (Fib_tbl_spl0 _3 (U120_inc _7))))
}

// String_nil #String_nil : (String)
ctr {String_nil}

// Bool_not #Bool_not (a: (Bool)) : (Bool)
fun (Bool_not a) {
  (Bool_not {Bool_true}) = {Bool_false}
  (Bool_not {Bool_false}) = {Bool_true}
}

// Apps_Fib_Player_show #Fib_plr_show (player: (Apps_Fib_Player)) : (String)
fun (Fib_plr_show player) {
  (Fib_plr_show player) = let list = {List_cons {Pair_new {String_cons #80 {String_cons #111 {String_cons #115 {String_cons #32 {String_cons #120 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #8}} {List_cons {Pair_new {String_cons #80 {String_cons #111 {String_cons #115 {String_cons #32 {String_cons #121 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #8}} {List_cons {Pair_new {String_cons #69 {String_cons #120 {String_cons #112 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #12}} {List_cons {Pair_new {String_cons #72 {String_cons #101 {String_cons #97 {String_cons #108 {String_cons #116 {String_cons #104 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #12}} {List_cons {Pair_new {String_cons #79 {String_cons #102 {String_cons #102 {String_cons #101 {String_cons #114 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #16}} {List_cons {Pair_new {String_cons #82 {String_cons #111 {String_cons #111 {String_cons #116 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #2}} {List_cons {Pair_new {String_cons #83 {String_cons #105 {String_cons #108 {String_cons #101 {String_cons #110 {String_cons #99 {String_cons #101 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #2}} {List_cons {Pair_new {String_cons #71 {String_cons #111 {String_cons #108 {String_cons #100 {String_cons #58 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #12}} {List_cons {Pair_new {String_cons #67 {String_cons #111 {String_cons #111 {String_cons #108 {String_cons #100 {String_cons #111 {String_cons #119 {String_cons #110 {String_cons #58 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #12}} {List_cons {Pair_new {String_cons #83 {String_cons #107 {String_cons #105 {String_cons #108 {String_cons #108 {String_cons #32 {String_cons #97 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #6}} {List_cons {Pair_new {String_cons #83 {String_cons #107 {String_cons #105 {String_cons #108 {String_cons #108 {String_cons #32 {String_cons #98 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #6}} {List_cons {Pair_new {String_cons #83 {String_cons #107 {String_cons #105 {String_cons #108 {String_cons #108 {String_cons #32 {String_cons #99 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #6}} {List_cons {Pair_new {String_cons #83 {String_cons #107 {String_cons #105 {String_cons #108 {String_cons #108 {String_cons #32 {String_cons #100 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #6}} {List_cons {Pair_new {String_cons #83 {String_cons #107 {String_cons #105 {String_cons #108 {String_cons #108 {String_cons #32 {String_cons #101 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #6}} {List_cons {Pair_new {String_cons #83 {String_cons #107 {String_cons #105 {String_cons #108 {String_cons #108 {String_cons #32 {String_cons #102 {String_cons #58 {String_cons #32 {String_cons #32 {String_nil}}}}}}}}}}} {U120_new #0 #6}} {List_nil}}}}}}}}}}}}}}}}; let func = @cur dup _6 _7 = cur; @acc dup _4 _5 = acc; let bit = (Pair_snd _4); dup _2 _3 = bit; let len = (Pair_snd _6); dup _0 _1 = len; let str = (Show_to_s8ce (U120_show (U120_bitwAwT _2 (U120_sub (U120_shifIxZ (U120_1) _0) (U120_1))))); let str = (String_coqti (String_coqti (Pair_fst _5) {String_cons #10 (Pair_fst _7)}) str); let acc = {Pair_new str (U120_shifUd1 _3 _1)}; acc; let acc = {Pair_new {String_nil} player}; let fold = (List_foldl acc func list); (Pair_fst fold)
}

// Show_to_string #Show_to_s8ce (show: (Show)) : (String)
fun (Show_to_s8ce show) {
  (Show_to_s8ce show) = (show {String_nil})
}

fun (U120_show0_ x0 x1) {
  (U120_show0_ #0 #0) = @str {String_cons #48 str}
  (U120_show0_ hi lo) = @str let num = {U120_new hi lo}; dup _2 _3 = num; let ten = {U120_new #0 #10}; dup _0 _1 = ten; (Pair_match (U120_div_mod _2 _0) @dm_fst @dm_snd let digit = (U120_low dm_snd); let rest = dm_fst; let next = {String_cons (+ #48 digit) str}; let func = (Bool_if (U120_less9ki _3 _1) @h h @h ((U120_show rest) h)); (func next))
}

// U120_show #U120_show (num: (U120)) : (Show)
fun (U120_show num) {
  (U120_show {U120_new _0 _1}) = (U120_show0_ _0 _1)
}

// String_cons #String_cons (head: U60) (tail: (String)) : (String)
ctr {String_cons head tail}

// String_concat #String_coqti (xs: (String)) (ys: (String)) : (String)
fun (String_coqti xs ys) {
  (String_coqti {String_cons x xs} ys) = {String_cons x (String_coqti xs ys)}
  (String_coqti {String_nil} ys) = ys
}

// Apps_Fib_State_init #Fib_st_init : (Apps_Fib_State)
fun (Fib_st_init) {
  (Fib_st_init) = let map = (Fib_map_allc); let tab = (Fib_tbl_allc); {Fib_st_new map tab}
}

// Apps_Fib_Table_alloc #Fib_tbl_allc : (Apps_Fib_Table)
fun (Fib_tbl_allc) {
  (Fib_tbl_allc) = (Bt_alloc (Fib_tbl_bses) (U120_0))
}

fun (Bt_alloc0_ x0 x1 x2) {
  (Bt_alloc0_ {Bt_base2} t default) = let m = (Bt_alloc t default); dup _0 _1 = m; {Bt_bin_tie _0 _1}
  (Bt_alloc0_ {Bt_base5} t default) = let m = (Bt_alloc t default); dup _0 _1 = m; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; {Bt_qui_tie _3 _4 _5 _6 _7}
}

// Data_BaseTree_alloc #Bt_alloc -(val: Type) (bases: (List (Data_BaseTree_Base))) (default: val) : (Data_BaseTree bases val)
fun (Bt_alloc bases default) {
  (Bt_alloc {List_nil} default) = default
  (Bt_alloc {List_cons _0 t} default) = (Bt_alloc0_ _0 t default)
}

// Apps_Fib_Map_alloc #Fib_map_allc : (Apps_Fib_Map)
fun (Fib_map_allc) {
  (Fib_map_allc) = (Bt_alloc (Fib_map_base) {U120_new #0 #0})
}

// Apps_Fib_Map_show #Fib_map_shw (x: U60) (y: U60) (w: U60) (h: U60) (map: (Apps_Fib_Map)) : (String)
fun (Fib_map_shw x y w h map) {
  (Fib_map_shw x y w h map) = dup _0 _1 = h; (Fib_map_shwy x (+ y _0) w _1 map)
}

// Apps_Fib_Map_show_y #Fib_map_shwy (x: U60) (y: U60) (w: U60) (h: U60) (map: (Apps_Fib_Map)) : (String)
fun (Fib_map_shwy x y w h map) {
  (Fib_map_shwy x y w h map) = dup _12 _13 = y; dup _10 _11 = map; dup _6 _7 = h; dup _8 _9 = _6; dup _4 _5 = x; dup _0 _1 = w; dup _2 _3 = _0; (Bool_if (U60_equal _7 #0) {String_nil} let string = {String_cons #10 (String_frixv (Fib_map_shwx (+ _4 _1) (- _12 _8) _2 _10))}; (String_coqti string (Fib_map_shwy _5 _13 _3 (U60_sub_sFcO _9 #1) _11)))
}

// Apps_Fib_Map_show_x #Fib_map_shwx (x: U60) (y: U60) (w: U60) (map: (Apps_Fib_Map)) : (List U60)
fun (Fib_map_shwx x y w map) {
  (Fib_map_shwx x y w map) = dup _6 _7 = w; dup _8 _9 = _6; dup _4 _5 = map; dup _2 _3 = x; dup _0 _1 = y; (Bool_if (U60_equal _7 #0) {List_nil} let real_x = (- _2 _8); let string = (Fib_map_get _4 (Fib_pos_new {U120_new #0 real_x} {U120_new #0 _0})); dup _10 _11 = string; let string = (Bool_if (U60_equal (U120_low _10) #0) {U120_new #0 #32} _11); {List_cons (U120_low string) (Fib_map_shwx _3 _1 (- _9 #1) _5)})
}

// String_from_list #String_frixv (l: (List (Char))) : (String)
fun (String_frixv l) {
  (String_frixv {List_nil}) = {String_nil}
  (String_frixv {List_cons x xs}) = {String_cons x (String_frixv xs)}
}

// Apps_Fib_Map_get #Fib_map_get (map: (Apps_Fib_Map)) (pos: (Apps_Fib_Pos)) : (Apps_Fib_Id)
fun (Fib_map_get map pos) {
  (Fib_map_get map pos) = let keys = (Fib_map_getc map pos); (Pair_match keys @keys_fst @keys_snd (Fib_map_gtil keys_fst keys_snd))
}

// Apps_Fib_Map_get_chunk #Fib_map_getc (map: (Apps_Fib_Map)) (pos: (Apps_Fib_Pos)) : (Pair (U120) (U120))
fun (Fib_map_getc map pos) {
  (Fib_map_getc map pos) = let keys = (Fib_map_kfps pos); dup _0 _1 = keys; let chunk = (Bt_get (Fib_map_base) (Pair_fst _0) map); let idx = (Pair_snd _1); {Pair_new chunk idx}
}

// Data_BaseTree_get #Bt_get -(val: Type) (bases: (List (Data_BaseTree_Base))) (key: (Data_BaseTree_Key bases)) (map: (Data_BaseTree bases val)) : val
fun (Bt_get bases key map) {
  (Bt_get {List_cons h t} key map) = (Bt_get0 h t key map)
}

// Data_BaseTree_get_aux #Bt_get0 -(val: Type) (head: (Data_BaseTree_Base)) (tail: (List (Data_BaseTree_Base))) (key: (Data_BaseTree_Key (List_cons _ head tail))) (map: (Data_BaseTree (List_cons _ head tail) val)) : val
fun (Bt_get0 head tail key map) {
  (Bt_get0 {Bt_base2} {List_nil} {Bt_base_b0 ~} {Bt_bin_tie b0 ~}) = b0
  (Bt_get0 {Bt_base2} {List_nil} {Bt_base_b1 ~} {Bt_bin_tie ~ b1}) = b1
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q0 ~} {Bt_qui_tie b0 ~ ~ ~ ~}) = b0
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q1 ~} {Bt_qui_tie ~ b1 ~ ~ ~}) = b1
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q2 ~} {Bt_qui_tie ~ ~ b2 ~ ~}) = b2
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q3 ~} {Bt_qui_tie ~ ~ ~ b3 ~}) = b3
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q4 ~} {Bt_qui_tie ~ ~ ~ ~ b4}) = b4
  (Bt_get0 {Bt_base2} {List_cons h c} {Bt_base_b0 y} {Bt_bin_tie b0 ~}) = (Bt_get0 h c y b0)
  (Bt_get0 {Bt_base2} {List_cons h c} {Bt_base_b1 y} {Bt_bin_tie ~ b1}) = (Bt_get0 h c y b1)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q0 y} {Bt_qui_tie b0 ~ ~ ~ ~}) = (Bt_get0 h c y b0)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q1 y} {Bt_qui_tie ~ b1 ~ ~ ~}) = (Bt_get0 h c y b1)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q2 y} {Bt_qui_tie ~ ~ b2 ~ ~}) = (Bt_get0 h c y b2)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q3 y} {Bt_qui_tie ~ ~ ~ b3 ~}) = (Bt_get0 h c y b3)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q4 y} {Bt_qui_tie ~ ~ ~ ~ b4}) = (Bt_get0 h c y b4)
}

// U60_equal #U60_equal (a: U60) (b: U60) : (Bool)
fun (U60_equal a b) {
  (U60_equal a b) = (U60_to_bool (== a b))
}

// U60_sub_saturated #U60_sub_sFcO (a: U60) (b: U60) : U60
fun (U60_sub_sFcO a b) {
  (U60_sub_sFcO a b) = dup _2 _3 = b; dup _0 _1 = a; (Bool_if (U60_less_qDF _2 _0) (- _1 _3) #0)
}

run {
  let state = (Fib_st_init);
  let p0 = (Fib_plr_new {U120_new #0 #141} {U120_new #0 #15} {U120_new #0 #3251} {U120_new #0 #100} {U120_new #0 #0} {U120_new #0 #0} {U120_new #0 #0} {List_cons (U120_1) {List_nil}});
  let p1 = (Fib_plr_new {U120_new #0 #144} {U120_new #0 #10} {U120_new #0 #1423} {U120_new #0 #100} {U120_new #0 #0} {U120_new #0 #0} {U120_new #0 #0} {List_cons (U120_1) {List_nil}});
  let p0_id = {U120_new #0 #1017};
  dup _6 _7 = p0_id;
  let p1_id = {U120_new #0 #625};
  let ~ = (Fib_pos_new {U120_new #0 #141} {U120_new #0 #15});
  let p1_pos = (Fib_pos_new {U120_new #0 #144} {U120_new #0 #10});
  let state = (Fib_st_pplc state p0 _6);
  let state = (Fib_st_pplc state p1 p1_id);
  dup _2 _3 = state;
  dup _4 _5 = _2;
  let t_shw0 = (Fib_tbl_spl (Fib_tst_tabl _3));
  let a_code = (Fib_ac_skcd _4 (U120_0) _7 p1_pos);
  let state = (Fib_st_upd _5 a_code);
  dup _0 _1 = state;
  let ~ = (Fib_map_shw #130 #0 #20 #20 (Fib_tst_map _0));
  let t_shw1 = (Fib_tbl_spl (Fib_tst_tabl _1));
  (Done (String_coqti t_shw0 t_shw1))
}
